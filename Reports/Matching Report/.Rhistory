, df_top.match$occupation
, df_bot.match$occupation
, list_df_text.capacity$top.match$text
, list_df_text.capacity$bot.match$text
, chr_text.user
) -> chr_finishing.remarks.dynamic
# Captions for dynamic reporting with R Markdown
chr_text.caption.circular <- 'Professional Compatibility Ranking'
chr_text.caption.table <- 'Your Top 7 and Bottom 3 Career Matches'
chr_text.caption.line <- 'Professional Compatibility Curve'
chr_text.caption.dist <- 'Professional Compatibility Distribution'
chr_text.caption.dumbbell.top <- paste('Your Best Career Match —', str_to_title(chr_matches.topbot[1]))
chr_text.caption.dumbbell.bot <- paste('Your Worst Career Match —', str_to_title(chr_matches.topbot[2]))
# RENDER R MARKDOWN REPORT --------------------------------------------------
rmarkdown::render(
'C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/matching_report2.Rmd'
, output_file = paste0('Matching Report (', chr_text.user, ').pdf')
)
# DEFAULT TEXTS FOR IMPUTATION
map(
excel_sheets('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/career_finder_report.xlsx')
, ~ read_excel('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/career_finder_report.xlsx', sheet = .x)
) -> list_df_text
names(list_df_text) <- excel_sheets('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/career_finder_report.xlsx')
# Remove carriage returns
list_df_text %>%
map(function(df){
df %>%
mutate(across(
where(is.character)
, ~ str_remove_all(.x, "\r") %>%
str_remove_all("\\\\n") %>%
str_replace_all("\n", "  \n")
))
}) -> list_df_text
# Remove carriage returns
list_df_text %>%
map(function(df){
df %>%
mutate(across(
where(is.character)
, ~ str_remove_all(.x, "\r") %>%
str_remove_all("\\\\n") %>%
str_replace_all("\n", "  \n")
))
}) -> list_df_text
# Section list
list_df_text$sections$text %>%
as.list() -> list_sections
names(list_sections) <- list_df_text$sections$section
map(
excel_sheets('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/career_finder_report.xlsx')
, ~ read_excel('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/career_finder_report.xlsx', sheet = .x)
) -> list_df_text
names(list_df_text) <- excel_sheets('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/career_finder_report.xlsx')
# Remove carriage returns
list_df_text %>%
map(function(df){
df %>%
mutate(across(
where(is.character)
, ~ str_remove_all(.x, "\r") %>%
str_remove_all("\\\\n") %>%
str_replace_all("\n", "  \n")
))
}) -> list_df_text
# Section list
list_df_text$sections$text %>%
as.list() -> list_sections
names(list_sections) <- list_df_text$sections$section
# VALUES FOR DYNAMIC TEXTS -----------------------------------------------
# Number of occupations
int_n.occupations <- nrow(df_KNN.output)
# Top match
df_KNN.output %>%
slice(1) %>%
select(
occupation
, similarity
, rank
, rank.norm
) -> df_top.match
# Bottom match
df_KNN.output %>%
slice(int_n.occupations) %>%
select(
occupation
, similarity
, rank
, rank.norm
) -> df_bot.match
# Median match
df_KNN.output %>%
filter(
similarity == quantile(
similarity, .50
)
) %>%
slice(1) %>%
select(
occupation
, similarity
, rank
, rank.norm
) -> df_med.match
# Recommended occupations (higher than cutff)
list_df_text$recommended %>%
mutate(
n.recommended =
df_KNN.output %>%
filter(similarity >= dbl_recommended.cutff) %>%
nrow()
# Percent of compatibility scores > cutff
, pct.recommended = n.recommended / nrow(df_KNN.output)
, n.interval =
pct.recommended %>%
round(1) %>%
findInterval(
vec = seq_scale.1_6
, all.inside = T
)
) %>%
filter(interval == n.interval) -> df_text.recommended
# Variance-adjusted skewness of professional compatibility curve interpretation
list_df_text$skewness %>%
mutate(
skewness = fun_capital.flex(df_KNN.output$similarity)
, n.interval =
skewness %>%
round(1) %>%
findInterval(
vec = seq_scale.1_7
, all.inside = T
)
) %>%
filter(interval == n.interval) -> df_text.skewness
# Top match comments
df_dumbbell %>%
filter(top.match > you) %>%
pull(factor) -> chr_top.underqualified
df_dumbbell %>%
filter(top.match < you) %>%
pull(factor) -> chr_top.overqualified
chr_top.underqualified %>%
length() %>%
as.character() %>%
str_replace('0', 'not a single') %>%
str_replace(
as.character(
nrow(df_dumbbell)
), 'all'
) -> chr_top.underqualified.n
case_when(
length(chr_top.underqualified) == 0 ~ ' whatsover'
, length(chr_top.underqualified) == nrow(df_dumbbell) ~ 's'
, length(chr_top.underqualified) == 1 ~
chr_top.underqualified %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ') %>%
paste0('(viz. ',.,')') %>%
paste('', .)
, T ~ chr_top.underqualified %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ') %>%
paste0('(viz. ',.,')') %>%
paste('s', .)
) -> chr_top.underqualified.viz
case_when(
length(chr_top.overqualified) == 0 ~ 'none whatsover'
, length(chr_top.overqualified) == nrow(df_dumbbell) ~ 'all of them'
, length(chr_top.overqualified) == (nrow(df_dumbbell) - 1) ~ 'all the others'
, length(chr_top.overqualified) <= 4 &
length(chr_top.overqualified) > 0 ~
chr_top.overqualified %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
, T ~ chr_top.overqualified %>%
head(3) %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
paste0(., ', and so on')
) -> chr_top.overqualified.viz
df_dumbbell %>%
slice_max(you, n = 3) %>%
slice(1:3) %>%
pull(factor) %>%
str_sort() %>%
paste0('"', . , '"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ') -> chr_top.3str
df_dumbbell %>%
slice_max(top.match, n = 3) %>%
slice(1:3) %>%
pull(factor) %>%
str_sort() %>%
paste0('"', . , '"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ') -> chr_top.match.3str
if_else(
chr_top.3str == chr_top.match.3str
, 'the exact same'
, chr_top.match.3str
) -> chr_top.match.3str
# Bot match comments
df_dumbbell %>%
filter(bot.match > you) %>%
pull(factor) -> chr_bot.underqualified
df_dumbbell %>%
filter(bot.match < you) %>%
pull(factor) -> chr_bot.overqualified
case_when(
length(chr_bot.underqualified) == 0 ~ 'no particular'
, length(chr_bot.underqualified) == nrow(df_dumbbell) ~ 'all'
, T ~ chr_bot.underqualified %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ') %>%
paste('the', .)
) -> chr_bot.underqualified.viz
case_when(
length(chr_bot.overqualified) == 0 ~ 'none'
, length(chr_bot.overqualified) == nrow(df_dumbbell) ~ 'every aspect'
, length(chr_bot.overqualified) >= (nrow(df_dumbbell) - 3) &
length(chr_bot.overqualified) != nrow(df_dumbbell) ~ 'the rest of them'
, T ~ chr_bot.overqualified %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
) -> chr_bot.overqualified.viz
df_dumbbell %>%
slice_max(you, n = 3) %>%
slice(1:3) %>%
pull(factor) %>%
str_sort() -> chr_bot.3str
df_dumbbell %>%
slice_max(bot.match, n = 3) %>%
slice(1:3) %>%
pull(factor) -> chr_bot.match.3str
intersect(
chr_bot.3str
, chr_bot.match.3str
) -> chr_bot.3str
case_when(
length(chr_bot.3str) == length(chr_bot.match.3str) ~ 'everything'
, length(chr_bot.3str) == 0 ~ 'nothing'
, T ~ chr_bot.3str %>%
str_sort() %>%
paste0('"', . , '"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
) -> chr_bot.3str
chr_bot.match.3str %>%
str_sort() %>%
paste0('"', . , '"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ') -> chr_bot.match.3str
# Finishing remarks
list_df_text$capacity %>%
mutate(
pct.over.top = length(chr_top.overqualified) / nrow(df_dumbbell)
, n.interval =
pct.over.top %>%
round(1) %>%
findInterval(
vec = seq_scale.1_5
, all.inside = T
)
) %>%
filter(interval == n.interval) -> df_text.top.capacity
map(
list(
'top.match' = chr_top.overqualified
, 'bot.match' = chr_bot.overqualified
)
, function(x){
list_df_text$capacity %>%
mutate(
pct.over = length(x) / nrow(df_dumbbell)
, n.interval =
pct.over %>%
round(1) %>%
findInterval(
vec = seq_scale.1_5
, all.inside = T
)
) %>%
filter(interval == n.interval) %>%
return()
}
) -> list_df_text.capacity
list_df_text.capacity$bot.match %>%
mutate(
text = if_else(
text == list_df_text.capacity$top.match$text
, paste(text, 'as well')
, text
)
) -> list_df_text.capacity$bot.match
# GENERATE DYNAMIC TEXTS ------------------------------------------------------------
# Report Title
chr_text.report.title <- glue('Professional Profile — {chr_text.user}')
# Introduction dynamic text
fun_text.dynamic(
.chr_text = list_sections$introduction
, .chr_pattern = chr_text.blank
, chr_text.user
, int_n.occupations
, int_n.occupations
) -> chr_text.intro.dynamic
# Circular bar plot commentary
fun_text.dynamic(
.chr_text = list_sections$circular_bar_chart
, .chr_pattern = chr_text.blank
, int_n.occupations
) -> chr_text.circular_plot.dynamic
# Top / bot matches table commentary
fun_text.dynamic(
.chr_text = list_sections$top_bot_table
, .chr_pattern = chr_text.blank
, df_top.match$occupation
, percent(df_top.match$similarity, accuracy = .01)
, df_bot.match$occupation
, percent(df_bot.match$similarity, accuracy = .01)
, df_med.match$occupation
, percent(df_med.match$similarity, accuracy = .01)
, df_text.recommended$text
, df_text.recommended$n.recommended
) -> chr_text.topbot.table.dynamic
# Professional compatibility curve
fun_text.dynamic(
.chr_text = list_sections$line_chart_intro
, .chr_pattern = chr_text.blank
) -> chr_text.compatibility.curve.intro.dynamic
fun_text.dynamic(
.chr_text = list_sections$line_chart
, .chr_pattern = chr_text.blank
) -> chr_text.compatibility.curve.dynamic
# Professional compatibility distribution
fun_text.dynamic(
.chr_text = list_sections$distribution_intro
, .chr_pattern = chr_text.blank
) -> chr_text.distribution.intro.dynamic
fun_text.dynamic(
.chr_text = list_sections$distribution
, .chr_pattern = chr_text.blank
, df_text.skewness$text1
, df_text.skewness$text2
) -> chr_text.distribution.dynamic
# Categories and factors
fun_text.dynamic(
.chr_text = list_sections$factors_intro
, .chr_pattern = chr_text.blank
) -> chr_text.factors.intro.dynamic
fun_text.dynamic(
.chr_text = list_sections$factors
, .chr_pattern = chr_text.blank
, length(list_factors)
, paste0(
paste0('"', names(list_factors), '"')
, collapse = ', '
) %>%
stri_replace_last_fixed(', ', ', and ')
, length(list_factors)
, length(flatten(list_factors))
, names(list_factors)[1]
, length(names(list_factors[[1]]))
, paste0(
paste0('"', names(list_factors[[1]]), '"')
, collapse = ', '
) %>%
stri_replace_last_fixed(', ', ', and ')
, names(list_factors)[2]
, paste0(
paste0('"', names(list_factors[[2]]), '"')
, collapse = ', '
) %>%
stri_replace_last_fixed(', ', ', and ')
, names(list_factors)[3]
, length(names(list_factors[[3]]))
, paste0(
paste0('"', names(list_factors[[3]]), '"')
, collapse = ', '
) %>%
stri_replace_last_fixed(', ', ', and ')
, length(flatten_chr(list_factors))
) -> chr_text.factors.dynamic
# Top match
fun_text.dynamic(
.chr_text = list_sections$top_match_intro
, .chr_pattern = chr_text.blank
) -> chr_text.top.intro.dynamic
fun_text.dynamic(
.chr_text = list_sections$top_match
, .chr_pattern = chr_text.blank
, df_top.match$occupation
, df_dumbbell %>%
slice_min(top.match.diff) %>%
pull(factor) %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
, (df_dumbbell %>%
slice_min(top.match.diff) %>%
nrow() > 1) %>%
if_else('s','')
, df_dumbbell %>%
slice_max(top.match.diff) %>%
pull(factor) %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
, df_dumbbell %>%
slice_min(top.match.diff) %>%
slice(1) %>%
pull(top.match.diff) %>%
percent(accuracy = .01)
, df_dumbbell %>%
slice_max(top.match.diff) %>%
slice(1) %>%
pull(top.match.diff) %>%
percent(accuracy = .01)
, chr_top.underqualified.n
, chr_top.underqualified.viz
, chr_top.overqualified.viz
, chr_top.3str
, df_top.match$occupation
, chr_top.match.3str
) -> chr_text.top.dynamic
# Bottom match
fun_text.dynamic(
.chr_text = list_sections$bot_match_intro
, .chr_pattern = chr_text.blank
, df_bot.match$occupation
) -> chr_text.bot.intro.dynamic
fun_text.dynamic(
.chr_text = list_sections$bot_match
, .chr_pattern = chr_text.blank
, df_dumbbell %>%
slice_min(bot.match.diff) %>%
pull(factor) %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
, (df_dumbbell %>%
slice_min(bot.match.diff) %>%
nrow() > 1) %>%
if_else('s','')
, (df_dumbbell %>%
slice_min(bot.match.diff) %>%
nrow() > 1) %>%
if_else('are','is')
, (df_dumbbell %>%
slice_min(bot.match.diff) %>%
nrow() > 1) %>%
if_else('s','')
, (df_dumbbell %>%
slice_max(bot.match.diff) %>%
nrow() > 1) %>%
if_else('are','is')
, df_dumbbell %>%
slice_max(bot.match.diff) %>%
pull(factor) %>%
paste0('"',.,'"') %>%
paste0(collapse = ', ') %>%
stri_replace_last_fixed(', ', ', and ')
, df_dumbbell %>%
slice_min(bot.match.diff) %>%
slice(1) %>%
pull(bot.match.diff) %>%
percent(accuracy = .01)
, df_dumbbell %>%
slice_max(bot.match.diff) %>%
slice(1) %>%
pull(bot.match.diff) %>%
percent(accuracy = .01)
, chr_bot.underqualified.viz
, (length(chr_bot.underqualified) > 1) %>%
if_else('s', '')
, chr_bot.overqualified.viz
, df_bot.match$occupation
, chr_bot.match.3str
, chr_bot.3str
) -> chr_text.bot.dynamic
# Finishing remarks
fun_text.dynamic(
.chr_text = list_sections$finishing_remarks
, .chr_pattern = chr_text.blank
, df_text.recommended$n.recommended
, df_text.recommended$text
, df_text.skewness$text3
, df_text.skewness$text4
, df_top.match$occupation
, df_bot.match$occupation
, list_df_text.capacity$top.match$text
, list_df_text.capacity$bot.match$text
, chr_text.user
) -> chr_finishing.remarks.dynamic
# Captions for dynamic reporting with R Markdown
chr_text.caption.circular <- 'Professional Compatibility Ranking'
chr_text.caption.table <- 'Your Top 7 and Bottom 3 Career Matches'
chr_text.caption.line <- 'Professional Compatibility Curve'
chr_text.caption.dist <- 'Professional Compatibility Distribution'
chr_text.caption.dumbbell.top <- paste('Your Best Career Match —', str_to_title(chr_matches.topbot[1]))
chr_text.caption.dumbbell.bot <- paste('Your Worst Career Match —', str_to_title(chr_matches.topbot[2]))
# RENDER R MARKDOWN REPORT --------------------------------------------------
rmarkdown::render(
'C:/Users/Cao/Documents/Github/Atlas-Research/Reports/Matching Report/matching_report2.Rmd'
, output_file = paste0('Matching Report (', chr_text.user, ').pdf')
)
