# CAPITAL FLEXIBILITY FUNCTION --------------------------------------------
fun_capital.flex <- function(.dbl_var){
# Check if var is numeric
if(all(is.na(.dbl_var))){
return(NA)
} else if(!is.numeric(.dbl_var)){
stop(".dbl_var must be a numeric vector.")
}
# Calculate variance
var(.dbl_var, na.rm = T) -> vr
# Calculate skewness E [-1,1]
(
mean(.dbl_var, na.rm = T)
- median(.dbl_var, na.rm = T)
) / sd(.dbl_var, na.rm = T) -> sk
# Calculate capital flexibility score
(1 - sk) * (1 - vr) / 2 -> kflex
return(kflex)
}
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
transmute(
dsds = fun_capital.flex(active_listening.l)
)
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
mutate(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
))
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
summarise(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
))
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
select(where(is.numeric))
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
select(where(is.numeric)) %>%
rowsum()
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
select(where(is.numeric)) %>%
rowSums()
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = rowSums(c_across(cols = where(is.numeric)))
)
df_occupations
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = rowSums(c_across(,cols = where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = rowSums(c_across(.,cols = where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = rowSums(.,c_across(cols = where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = rowSums(select(c_across(cols = where(is.numeric))))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = rowSums(c_across(cols = select(where(is.numeric))))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
transmute(
dsds = sum(c_across(cols = where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
rowwise() %>%
transmute(
dsds = sum(c_across(cols = where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
select(-occupation) %>%
rowSums()
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
select(-occupation) %>%
rowSums() %>%
bind_cols(df_occupations)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
mutate(across(
where(is.numeric) / rowSums(where(is.numeric))
))
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
ungroup() %>%
mutate(across(
where(is.numeric) / rowSums(where(is.numeric))
))
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
ungroup() %>%
mutate(across(where(is.numeric))/rowSums(across(where(is.numeric))))
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
ungroup() %>%
mutate(
across(where(is.numeric))
/ rowSums(across(where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
mutate(
across(where(is.numeric))
/ rowSums(across(where(is.numeric)))
)
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
mutate(
across(where(is.numeric))
/ rowSums(across(where(is.numeric)))
) -> df_occupations.pct
df_occupations.pct %>%
select(-occupation) %>%
rowSums()
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(cols = where(is.numeric))
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = attribute
, values_to = pct
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'pct'
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'pct.total'
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'score.pct'
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
)
df_occupations %>%
summarise(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
))
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
summarise(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
)) %>%
pivot_longer()
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
summarise(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
)) %>%
pivot_longer(
cols = everything()
)
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
summarise(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
)) %>%
pivot_longer(
cols = everything()
, names_to = 'attribute'
, values_to = 'capital.flex'
)
# -------- CAPITAL FLEXIBLITY ---------------------------------------------
# APPLY FUNCTION -----------------------------------------------------------
df_occupations %>%
summarise(
across(
.cols = where(is.numeric)
,.fns = fun_capital.flex
)) %>%
pivot_longer(
cols = everything()
, names_to = 'attribute'
, values_to = 'capital.flex'
) -> df_kflex.long
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
left_join(
df_kflex.long
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
)
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex.pct * level.pct)
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
mutate(
capital.flex.pct = capital.flex * level.pct
) %>%
summarise(
capital.flex.pct = sum(capital.flex.pct)
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
)
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
) %>%
arrange(desc(capital.flex.pct))
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
) %>%
arrange(desc(capital.flex.pct)) %>% view()
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>% view
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
# mutate(
#   across(where(is.numeric))
#   / rowSums(across(where(is.numeric)))
) -> df_occupations.pct
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations -> df_occupations.pct
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>% view
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
) %>%
arrange(desc(capital.flex.pct)) %>% view()
# ATTRIBUTE PROPORTION ----------------------------------------------------
df_occupations %>%
mutate(
across(where(is.numeric))
/ rowSums(across(where(is.numeric)))
) -> df_occupations.pct
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
) %>%
arrange(desc(capital.flex.pct)) %>% view()
# FLEXIBLE CAPITAL PER OCCUPATION -----------------------------------------
df_occupations.pct %>%
pivot_longer(
cols = where(is.numeric)
, names_to = 'attribute'
, values_to = 'level.pct'
) %>%
full_join(
df_kflex.long
) %>%
group_by(
occupation
) %>%
summarise(
capital.flex.pct = sum(capital.flex * level.pct)
) %>%
arrange(desc(capital.flex.pct)) -> df_occupations.kflex
# -------- RESULTS --------------------------------------------------------
# LINE CHART -------------------------------------------------------------------
df_occupations.kflex %>%
arrange(capital.flex.pct) %>%
mutate(n = row_number()) %>%
fun_plot.line(aes(
x = n
, y = capital.flex.pct
)
, .dbl_limits.y = c(0,1)
, .reorder_fct = T
, .reorder_desc = F
, .reorder_fun = max
, .theme = ggridges::theme_ridges(center_axis_labels = T) +
theme(axis.text.x = element_blank())
, .list_labs = list(
title = str_to_title('the capital flexibility function')
, x = str_to_title('attribute')
, y = str_to_title('capital flexiblity score')
))
# PLOTTING FUNCTIONS ------------------------------------------------------
source('C:/Users/Cao/Documents/Github/Atlas-Research/Plotting Functions/Auto_plots.R')
# -------- RESULTS --------------------------------------------------------
# LINE CHART -------------------------------------------------------------------
df_occupations.kflex %>%
arrange(capital.flex.pct) %>%
mutate(n = row_number()) %>%
fun_plot.line(aes(
x = n
, y = capital.flex.pct
)
, .dbl_limits.y = c(0,1)
, .reorder_fct = T
, .reorder_desc = F
, .reorder_fun = max
, .theme = ggridges::theme_ridges(center_axis_labels = T) +
theme(axis.text.x = element_blank())
, .list_labs = list(
title = str_to_title('the capital flexibility function')
, x = str_to_title('attribute')
, y = str_to_title('capital flexiblity score')
))
df_kflex.long
df_kflex.long %>%
arrange(capital.flex)
df_kflex.long %>%
arrange(desc(capital.flex))
# DENSITY -------------------------------------------------------------------
df_skew_var.long %>%
fun_plot.density(aes(
x = capital.flex
)
, .list_axis.x.args = list(limits = c(0,1))
, .fun_format.y = label_number(accuracy = .01)
, .theme = ggridges::theme_ridges(center_axis_labels = T)
, .list_labs = list(
title = str_to_title('dispersion of the capital flexibility function')
, x = str_to_title('capital flexiblity score')
, y = str_to_title('density')
))
