.dbl_immune.ub
, .lgc_aggregate = T
) -> list_ai.impact
list_ai.impact$
items.impact %>%
arrange(desc(
item.impact
))
list_ai.impact$
items.impact
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
)
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
item.impact + 1
)
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
1 + item.impact
)
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
-item.impact
)
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
-item.impact
, item.impact =
pmax(0,item.impact)
)
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
-item.impact
, item.impact =
pmax(0,item.impact)
) %>%
arrange(desc(
item.impact
))
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
-item.impact
, item.impact =
pmax(0,item.impact)
) %>%
arrange(desc(
item.impact
)) %>%
print(n = nrow())
list_ai.impact$
items.impact %>%
mutate(
item.impact =
item.impact / 100
, item.impact =
-item.impact
, item.impact =
pmax(0,item.impact)
) %>%
arrange(desc(
item.impact
)) %>%
print(n = nrow(.))
dbl_factors.impact
# Multi-tasking score
set_names(
c(
'factor1' = 0
, 'factor2' = 0
# , 'factor3' = -17/2
, 'factor3' = 0
, 'factor4' = 0
, 'factor5' = 0
# , 'factor5' = -17
, 'factor6' = 0
, 'factor7' = 0
, 'factor8' = 0
# , 'factor8' = -17
, 'factor9' = 0
, 'factor10' = -67
, 'factor11' = 0
# , 'factor11' = -17
, 'factor12' = 0
, 'factor13' = 0
, 'factor14' = -17
, 'factor15' = 0
)
, list_df_text$
factor.model$
factor.name
) -> dbl_factors.impact
# [RESULTS] ----------------------------------------------
# - Estimate exogenous impact (US labor market) ---------------------------------------------
fun_efa.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .dbl_weights =
df_occupations$
employment2
, .efa_model = efa_model
, .dbl_factors.impact =
dbl_factors.impact
, .dbl_scale.lb =
.dbl_scale.lb
, .dbl_scale.ub =
.dbl_scale.ub
, .dbl_immune.lb =
.dbl_immune.lb
, .dbl_immune.ub =
.dbl_immune.ub
, .dbl_impact.lb = 0
, .dbl_impact.ub = 100
, .lgc_aggregate = T
) -> list_ai.impact
list_ai.impact$
items.impact
# [RESULTS] ----------------------------------------------
# - Estimate exogenous impact (US labor market) ---------------------------------------------
fun_efa.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .dbl_weights =
df_occupations$
employment2
, .efa_model = efa_model
, .dbl_factors.impact =
dbl_factors.impact
, .dbl_scale.lb =
.dbl_scale.lb
, .dbl_scale.ub =
.dbl_scale.ub
, .dbl_immune.lb =
.dbl_immune.lb
, .dbl_immune.ub =
.dbl_immune.ub
, .dbl_impact.lb = -100
, .dbl_impact.ub = 0
, .lgc_aggregate = T
) -> list_ai.impact
list_ai.impact$
items.impact
list_ai.impact$
items.impact
list_ai.impact$
factors.impact
list_ai.impact$
aggregate.impact
list_ai.impact$
overall.impact
list_ai.impact$
individual.impact
list_ai.impact$
aggregate.impact
list_ai.impact$
aggregate.impact %>%
mutate(
aggregate.impact =
-aggregate.impact
)
list_ai.impact$
aggregate.impact %>%
mutate(
aggregate.impact =
-aggregate.impact
) %>%
arrange(desc(
aggregate.impact
))
list_ai.impact$
aggregate.impact %>%
mutate(
aggregate.impact =
-aggregate.impact
) %>%
arrange(desc(
aggregate.impact
)) %>%
print(n = nrow(.))
# Multi-tasking score
set_names(
c(
'factor1' = 0
, 'factor2' = 0
# , 'factor3' = -17/2
, 'factor3' = 0
, 'factor4' = 0
, 'factor5' = 0
# , 'factor5' = -17
, 'factor6' = 0
, 'factor7' = 0
, 'factor8' = 0
# , 'factor8' = -17
, 'factor9' = 0
, 'factor10' = -67
, 'factor11' = 0
# , 'factor11' = -17
, 'factor12' = 0
, 'factor13' = 0
, 'factor14' = -17
, 'factor15' = 0
)
, list_df_text$
factor.model$
factor.name
) -> dbl_factors.impact
dbl_factors.impact
# Multi-tasking score
set_names(
c(
'factor1' = 0
, 'factor2' = 0
# , 'factor3' = -17/2
, 'factor3' = 0
, 'factor4' = 0
, 'factor5' = 0
# , 'factor5' = -17
, 'factor6' = 0
, 'factor7' = 0
, 'factor8' = 0
# , 'factor8' = -17
, 'factor9' = 0
, 'factor10' = -67
, 'factor11' = 0
# , 'factor11' = -17
, 'factor12' = 0
, 'factor13' = 17
, 'factor14' = -17
, 'factor15' = 0
)
, list_df_text$
factor.model$
factor.name
) -> dbl_factors.impact
dbl_factors.impact
# [RESULTS] ----------------------------------------------
# - Estimate exogenous impact (US labor market) ---------------------------------------------
fun_efa.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .dbl_weights =
df_occupations$
employment2
, .efa_model = efa_model
, .dbl_factors.impact =
dbl_factors.impact
, .dbl_scale.lb =
.dbl_scale.lb
, .dbl_scale.ub =
.dbl_scale.ub
, .dbl_immune.lb =
.dbl_immune.lb
, .dbl_immune.ub =
.dbl_immune.ub
, .dbl_impact.lb = -100
, .dbl_impact.ub = 0
, .lgc_aggregate = T
) -> list_ai.impact
list_ai.impact$
items.impact
list_ai.impact$
factors.impact
list_ai.impact$
aggregate.impact %>%
mutate(
aggregate.impact =
-aggregate.impact
) %>%
arrange(desc(
aggregate.impact
)) %>%
print(n = nrow(.))
dbl_factors.impact
# Multi-tasking score
set_names(
c(
'factor1' = 0
, 'factor2' = 0
# , 'factor3' = -17/2
, 'factor3' = 0
, 'factor4' = 0
, 'factor5' = 0
# , 'factor5' = -17
, 'factor6' = 0
, 'factor7' = 0
, 'factor8' = 0
# , 'factor8' = -17
, 'factor9' = 0
, 'factor10' = -67
, 'factor11' = 0
# , 'factor11' = -17
, 'factor12' = 0
, 'factor13' = 100
, 'factor14' = -17
, 'factor15' = 0
)
, list_df_text$
factor.model$
factor.name
) -> dbl_factors.impact
# [RESULTS] ----------------------------------------------
# - Estimate exogenous impact (US labor market) ---------------------------------------------
fun_efa.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .dbl_weights =
df_occupations$
employment2
, .efa_model = efa_model
, .dbl_factors.impact =
dbl_factors.impact
, .dbl_scale.lb =
.dbl_scale.lb
, .dbl_scale.ub =
.dbl_scale.ub
, .dbl_immune.lb =
.dbl_immune.lb
, .dbl_immune.ub =
.dbl_immune.ub
, .dbl_impact.lb = -100
, .dbl_impact.ub = 0
, .lgc_aggregate = T
) -> list_ai.impact
list_ai.impact$
items.impact
list_ai.impact$
factors.impact
list_ai.impact$
aggregate.impact %>%
mutate(
aggregate.impact =
-aggregate.impact
) %>%
arrange(desc(
aggregate.impact
)) %>%
print(n = nrow(.))
df_occupations
df_occupations %>%
select(ends_with('.l'))
df_occupations %>%
select(ends_with('.l')) ->
dsds
df_occupations$
employment2
rm(dsds)
df_occupations %>%
select(
ends_with('.l')
) -> df_items
df_items
df_occupations$
employment2
df_occupations$
employment2 ->
dbl_weights
1:ncol(df_items)
map(
1:ncol(df_items)
~ bvls::bvls(
as.matrix(df_items[-.x]) *
sqrt(dbl_weights)
, df_items[[.x]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
)
class(1:ncol(df_items))
map(
.x = 1:ncol(df_items)
~ bvls::bvls(
as.matrix(df_items[-.x]) *
sqrt(dbl_weights)
, df_items[[.x]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
)
seq(1, ncol(df_items))
map(
.x = seq(1, ncol(df_items))
~ bvls::bvls(
as.matrix(df_items[-.x]) *
sqrt(dbl_weights)
, df_items[[.x]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
)
library(tidyverse)
map(
.x = seq(1, ncol(df_items))
~ bvls::bvls(
as.matrix(df_items[-.x]) *
sqrt(dbl_weights)
, df_items[[.x]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
)
seq(1, ncol(df_items)) -> dsds
map(
.x = dsds
~ bvls::bvls(
as.matrix(df_items[-.x]) *
sqrt(dbl_weights)
, df_items[[.x]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
)
rm(dsds)
map(
.x = 1:ncol(df_items)
, ~ bvls::bvls(
as.matrix(df_items[-.x]) *
sqrt(dbl_weights)
, df_items[[.x]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
)
df_items
df_items[-1]
as.matrix(df_items[-1])
as.matrix(df_items[-1]) *
sqrt(dbl_weights)
df_items[1]
df_items[[1]]
df_items[[1]] *
sqrt(dbl_weights)
bvls::bvls(
as.matrix(df_items[-1]) *
sqrt(dbl_weights)
, df_items[[1]] *
sqrt(dbl_weights)
, bl = 0
, bu = 1
)
bvls::bvls(
as.matrix(df_items[-1]) *
sqrt(dbl_weights)
, df_items[[1]] *
sqrt(dbl_weights)
, bl = rep(0, nrow(df_items))
, bu = rep(1, nrow(df_items))
)
bvls::bvls(
as.matrix(df_items[-1]) *
sqrt(dbl_weights)
, df_items[[1]] *
sqrt(dbl_weights)
, bl = rep(0, nrow(df_items))
, bu = rep(1, nrow(df_items))
)
bvls::bvls(
A = as.matrix(df_items[-1]) *
sqrt(dbl_weights)
, b = df_items[[1]] *
sqrt(dbl_weights)
, bl = rep(0, nrow(df_items))
, bu = rep(1, nrow(df_items))
)
