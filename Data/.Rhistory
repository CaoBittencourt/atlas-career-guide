list_ai.impact.user$
overall.impact$
aggregate.impact
, chr_user.analysis2 =
list_ai.impact.user$
overall.impact$
aggregate.impact
, chr_market.comparison =
list_ai.impact.user$
overall.impact$
aggregate.impact /
list_ai.impact$
overall.impact$
aggregate.impact
) -> list_scores
# - Dictionary evaluation --------------------------------------------------------------------
# Dictionary evaluation
c(
list_text
, fun_dictionary.list(
.df_dictionary.long =
list_df_text$
dictionary.eval
, .list_dbl_score.eval =
list_scores
)
) -> list_text
list_scores
list_text
list_df_text$dictionary.eval
list_df_text$
dictionary.eval %>%
filter(
key == 'chr_market.comparison'
)
list_df_text$
dictionary.eval %>%
filter(
key == 'chr_market.comparison'
) %>%
select(text)
list_scores$
chr_market.comparison
list_df_text$
dictionary.eval %>%
filter(
key == 'chr_market.comparison'
) %>%
mutate(
score.interval =
findInterval(
list_scores$
chr_market.comparison
, interval.lb
)
)
list_df_text$
dictionary.eval %>%
filter(
key == 'chr_market.comparison'
) %>%
mutate(
score.interval =
findInterval(
list_scores$
chr_market.comparison
, interval.lb
)
) %>%
select(!c(
language
, key
, key.desc
))
list_df_text$
dictionary.eval %>%
filter(
key == 'chr_market.comparison'
) %>%
mutate(
score.interval =
findInterval(
list_scores$
chr_market.comparison
, interval.lb
)
) %>%
select(!c(
language
, key
, key.desc
)) %>%
filter(
interval ==
score.interval
)
# Dynamic texts
map(
excel_sheets('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/AI Impact/ai_impact_report.xlsx')
, ~ read_excel('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/AI Impact/ai_impact_report.xlsx', sheet = .x)
) -> list_df_text
names(list_df_text) <- excel_sheets('C:/Users/Cao/Documents/Github/Atlas-Research/Reports/AI Impact/ai_impact_report.xlsx')
# Remove carriage returns
list_df_text %>%
map(function(df){
df %>%
mutate(across(
where(is.character)
, ~ str_remove_all(.x, "\r") %>%
str_remove_all("\\\\n") %>%
str_replace_all("\n", "  \n")
))
}) -> list_df_text
# Remove reference dictionary
list_df_text$
dictionary <- NULL
# Filter text by language
list_df_text %>%
map(
~ .x %>%
filter(
language ==
chr_language
)
) -> list_df_text
# - Estimate exogenous impact (US labor market) ---------------------------------------------
fun_efa.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .dbl_weights =
df_occupations$
employment2
, .efa_model = efa_model
, .dbl_factors.impact =
dbl_factors.impact
, .dbl_scale.lb =
.dbl_scale.lb
, .dbl_scale.ub =
.dbl_scale.ub
, .dbl_immune.lb =
.dbl_immune.lb
, .dbl_immune.ub =
.dbl_immune.ub
, .lgc_aggregate = T
) -> list_ai.impact
# - Estimate exogenous impact (user) ---------------------------------------------
fun_efa.impact(
.df_data = df_input
, .dbl_weights = NULL
, .efa_model = efa_model
, .dbl_factors.impact =
dbl_factors.impact
, .dbl_scale.lb =
.dbl_scale.lb
, .dbl_scale.ub =
.dbl_scale.ub
, .dbl_immune.lb =
.dbl_immune.lb
, .dbl_immune.ub =
.dbl_immune.ub
, .lgc_aggregate = T
) -> list_ai.impact.user
# - Item impact -----------------------------------------------------------
list_ai.impact$
items.impact %>%
arrange(desc(
item.impact
)) %>%
slice(
1:10
, (n() - 9): n()
) %>%
mutate(
impact.type =
if_else(
item.impact >= 0
, 'Positive Impact'
, 'Negative Impact'
)
) %>%
group_by(
impact.type
) %>%
arrange(desc(
abs(item.impact)
)) -> df_items.top_bot
# - Most affected occupation -----------------------------------------
list_ai.impact$
aggregate.impact %>%
filter(
aggregate.impact ==
min(aggregate.impact)
) -> df_max.aggregate
list_ai.impact$
individual.impact %>%
filter(
occupation ==
df_max.aggregate$
occupation
) -> df_max.individual
# - Aggregate impact by occupation -----------------------------------------------------
list_ai.impact$
aggregate.impact %>%
mutate(
weight =
weight /
min(weight)
, weight =
ceiling(weight)
) %>%
group_by(
occupation
) %>%
slice(rep(
1, weight
)) %>%
ungroup() -> df_impact.hist
# df_impact.hist %>%
#   fun_plot.histogram(aes(
#     x = aggregate.impact
#   )
#   , .list_axis.x.args =
#     list(
#       limits = c(-1.1/2, 0)
#       , breaks = seq(-1/2,0,length.out = 4)
#     )
#   , .fun_format.x = percent
#   )
# - Preliminary values for analyses ----------------------------------------------------------------------
# Preliminary values for analyses
list(
username =
df_input$
occupation
# username
, nrow_occupations =
df_occupations %>%
nrow()
, nitems.complete =
list_ai.impact$
items.impact %>%
nrow()
, nfactors =
list_df_text$
factor.model %>%
nrow()
, factor.names =
list_df_text$
factor.model$
factor.name %>%
fun_text.commas(
.chr_last.sep =
list_df_text$
last.comma$
text
)
, chr_most_affected.occupation =
df_max.aggregate$
occupation %>%
fun_text.commas()
, pct_most_affected.impact =
df_max.aggregate$
aggregate.impact %>%
percent(
accuracy = .01
) %>%
str_replace(
'-'
, '--'
)
, pct_most_affected.remaining =
sum(
df_max.aggregate$
aggregate.impact
, 1
) %>%
percent(
accuracy = .01
)
, pct_overall.impact =
list_ai.impact$
overall.impact$
aggregate.impact %>%
percent(
accuracy = .01
) %>%
str_replace(
'-'
, '--'
)
, int_unemployment =
list_ai.impact$
aggregate.impact %>%
reframe(sum(
-aggregate.impact *
weight
)) %>%
pull() %>%
dollar(prefix = '')
, pct_user.impact =
list_ai.impact.user$
overall.impact$
aggregate.impact %>%
percent(
accuracy = .01
) %>%
str_replace(
'-'
, '--'
)
) -> list_text
# - List for dictionary evaluation -------------------------------------------------------------------------
# List for dictionary evaluation
list(
chr_automation.negative =
list_ai.impact$
items.impact %>%
filter(
item.impact < 0
) %>%
reframe(
item.impact =
mean(item.impact)
) %>%
pull()
, most_affected.analysis =
df_max.aggregate$
aggregate.impact
, chr_analysis.panorama =
list_ai.impact$
overall.impact$
aggregate.impact /
df_max.aggregate$
aggregate.impact
, chr_is.isnot =
list_ai.impact$
overall.impact$
aggregate.impact /
df_max.aggregate$
aggregate.impact
, labor_market.analysis =
list_ai.impact.user$
overall.impact$
aggregate.impact
, chr_oecd.comparison =
list_ai.impact$
overall.impact$
aggregate.impact /
dbl_impact.oecd
, chr_user.analysis1 =
list_ai.impact.user$
overall.impact$
aggregate.impact
, chr_user.analysis2 =
list_ai.impact.user$
overall.impact$
aggregate.impact
, chr_market.comparison =
list_ai.impact.user$
overall.impact$
aggregate.impact /
list_ai.impact$
overall.impact$
aggregate.impact
) -> list_scores
# - Dictionary evaluation --------------------------------------------------------------------
# Dictionary evaluation
c(
list_text
, fun_dictionary.list(
.df_dictionary.long =
list_df_text$
dictionary.eval
, .list_dbl_score.eval =
list_scores
)
) -> list_text
# - Generate dynamic texts ------------------------------------------------
# Impute dynamic text
map_if(
list_df_text
, ~ !any(.x$complexity == 'complex', na.rm = T)
, ~ fun_text.dynamic(.x, list_text)
) -> list_df_text
list_df_text$
sections %>%
mutate(
text = if_else(
section == 'date'
, format(
Sys.Date()
, text
) , text
)) ->
list_df_text$
sections
# Text list
list_df_text$
sections$
text %>%
as.list() -> list_report.texts
list_text
# - Generate remaining text elements ------------------------------------------------
# Section titles
list_df_text$
sections.title %>%
mutate(
title =
paste(
strrep('#', level)
, title
)) %>%
pull(title) %>%
as.list() -> list_report.titles
# Captions
list_df_text$
plots %>%
pull(plot.caption) %>%
unique() %>%
as.list() -> list_plots.caption
# Text elements
list_df_text$
text.elements %>%
pull(title) %>%
as.list() -> list_text.elements
# - Output / Render R Markdown report ----------------------------------------------
rmarkdown::render(
'C:/Users/Cao/Documents/Github/Atlas-Research/Reports/AI Impact/ai_report.Rmd'
)
# - Workspace -------------------------------------------------------------
save.image(
'ai_assessment.RData'
)
load('ai_assessment.RData')
load('dsds.RData')
# - Workspace -------------------------------------------------------------
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('./ai_assessment_setup.R')
}
)
# - Workspace -------------------------------------------------------------
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('./ai_assessment_setup.R')
}
)
# - Workspace -------------------------------------------------------------
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('./ai_assessment_setup.R')
}
)
# - Workspace -------------------------------------------------------------
getwd()
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('./ai_assessment_setup.R')
}
)
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('./ai_assessment_setup.R')
}
)
# - Workspace -------------------------------------------------------------
getwd()
# - Workspace -------------------------------------------------------------
getwd()
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('C:/Users/Cao/Documents/Github/Atlas-Research/Workspace/ai_assessment_setup.R')
}
)
# - Parameters ------------------------------------------------------------
# Language
chr_language <- 'en'
# - Workspace -------------------------------------------------------------
getwd()
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('C:/Users/Cao/Documents/Github/Atlas-Research/Workspace/ai_assessment_setup.R')
}
)
# - Workspace -------------------------------------------------------------
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('C:/Users/Cao/Documents/Github/Atlas-Research/Workspace/ai_assessment_setup.R')
}
)
dbl_factors.impact
# - Workspace -------------------------------------------------------------
tryCatch(
load('./ai_assessment.RData')
, error = function(e){
source('C:/Users/Cao/Documents/Github/Atlas-Research/Workspace/ai_assessment_setup.R')
}
)
list_ai.impact
dbl_factors.impact
