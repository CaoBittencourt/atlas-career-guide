}
# Y axis labels
if(!length(.chr_format.y)){
scale_y_continuous(
labels = scales::number_format(accuracy = dbl_accuracy.y)
, breaks = scales::breaks_extended(n = .int_breaks.y)
) -> plt_axis.y
} else if(tolower(.chr_format.y) == 'percent' | tolower(.chr_format.y) == '%'){
scale_y_continuous(
labels = scales::percent_format(accuracy = dbl_accuracy.y)
, breaks = scales::breaks_extended(n = .int_breaks.y)
) -> plt_axis.y
} else if(tolower(.chr_format.y) == 'usd' | tolower(.chr_format.y) == '$'){
scale_y_continuous(
labels = scales::label_dollar(accuracy = dbl_accuracy.y)
, breaks = scales::breaks_extended(n = .int_breaks.y)
) -> plt_axis.y
} else if(tolower(.chr_format.y) == 'brl' | tolower(.chr_format.y) == 'R$'){
scale_y_continuous(
labels = scales::label_dollar(accuracy = dbl_accuracy.y, prefix = 'R$')
, breaks = scales::breaks_extended(n = .int_breaks.y)
) -> plt_axis.y
} else if(tolower(.chr_format.y) == 'text' | tolower(.chr_format.y) == 'text'){
NULL -> plt_axis.y
} else {
scale_y_continuous(
labels = scales::number_format(accuracy = dbl_accuracy.y)
, breaks = scales::breaks_extended(n = .int_breaks.y)
) -> plt_axis.y
}
# Output
return(
list(
'plt_format.x' = plt_axis.x
, 'plt_format.y' = plt_axis.y
))
}
# [TO DO] DYNAMIC POLAR AXIS (CIRCULAR PLOTS) -----------------------------
# [DONE] DYNAMIC LEGENDS ----------------------------------------------------------
fun_legends <- function(.list_legend){
# List
if(!is.list(.list_legend)){
stop("'.list_legend' must be a named list of logical elements.")
}
# Character
lapply(
.list_legend
, function(args){
if(!(!length(args) | is.character(args))){
stop("'.list_legend' must be a named list of character elements.")
}
}
)
guides(!!!.list_legend) %>%
return()
}
# [DONE] DYNAMIC LABS ------------------------------------------------------------
fun_labs <- function(.list_labs){
# List
if(!is.list(.list_labs)){
stop("'.list_labs' must be a named list of character elements.")
}
# Character
lapply(
.list_labs
, function(args){
if(!(!length(args) | is.character(args))){
stop("'.list_labs' must be a named list of character elements.")
}
}
)
# Labs
labs(!!!.list_labs) %>%
return()
}
# [DONE] DYNAMIC THEME -----------------------------------------------------------
fun_theme <- function(.theme){
# Theme
if(!is.theme(.theme)){
stop("'.theme' must be a valid theme.")
}
# Output
return(.theme)
}
# ------- PLOTS -----------------------------------------------------------
# HISTOGRAM / DENSITY FUNCTION --------------------------------------------
fun_dist.plot <- function(
# Data
.df_data
, .mapping
# Labels
, .list_labs = list(NULL)
# Plots
, .density = T
, .histogram = F
, .int_bins = NULL
# Facets
, .sym_facets = NULL
, .int_facets = NULL
# Colors
, .scale_colors = list(
viridis::scale_color_viridis(discrete = T)
, viridis::scale_fill_viridis(discrete = T)
)
, .chr_manual.pal = NULL
, .chr_manual.aes = c('fill','color')
# Legend
, .list_legend = list(NULL)
# Axis
, .int_breaks.x = 5
, .int_breaks.y = 5
, .int_decimals.x = 2
, .int_decimals.y = 2
, .chr_format.x = NULL
, .chr_format.y = NULL
# Theme
, .theme = ggridges::theme_ridges()
){
# Errors
# Data frame
if(!is.data.frame(.df_data)){
stop("'.df_data' must be a data frame.")
}
# Logical
if(!(
is.logical(.density) &
!is.na(.density)
)){
stop("'.density' must be either TRUE or FALSE.")
}
if(!(
is.logical(.histogram) &
!is.na(.histogram)
)){
stop("'.histogram' must be either TRUE or FALSE.")
}
# Numeric
if(!(!length(.int_bins) | is.numeric(.int_bins))){
stop("'.int_bins' must be an integer.")
}
# Convert to integers
if(is.numeric(.int_bins)){
round(.int_bins) -> .int_bins
}
# Quo vars
enquo(.sym_facets) -> enq_facets
# Facets
fun_facets(
.enq_facets = enq_facets
, .int_facets = .int_facets
) -> plt_facets
# No color mapping
# Color mapping
fun_colors(
.scale_color = .scale_colors
, .chr_manual.pal = .chr_manual.pal
, .chr_manual.aes = .chr_manual.aes
) -> plt_colors
# Axis format
fun_axis.format(
.int_breaks.x = .int_breaks.x
, .int_breaks.y = .int_breaks.y
, .int_decimals.x = .int_decimals.x
, .int_decimals.y = .int_decimals.y
, .chr_format.x = .chr_format.x
, .chr_format.y = .chr_format.y
) -> list_axis.format
# Theme
fun_theme(.theme) -> plt_theme
# Legend
fun_legends(.list_legend) -> plt_legend
# Labs
fun_labs(.list_labs) -> plt_labs
# Density plot
if(.density){
.df_data %>%
# Plot
ggplot(.mapping) +
geom_density(size = 1.22) +
plt_facets +
# Colors
plt_colors +
# Axis
list_axis.format$plt_format.x +
list_axis.format$plt_format.y +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_density
} else {
NULL -> plt_density
}
# Histogram plot
if(.histogram){
.df_data %>%
# Plot
ggplot(.mapping) +
geom_histogram(bins = .int_bins) +
plt_facets +
# Colors
plt_colors +
# Axis
list_axis.format$plt_format.x +
list_axis.format$plt_format.y +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_histogram
} else {
NULL -> plt_histogram
}
# Output
return(
compact(
list(
'density' = plt_density
, 'histogram' = plt_histogram
)))
}
# BAR / LOLLIPOP FUNCTION --------------------------------------------
fun_bar.plot <- function(
# Data
.df_data
, .mapping
# Labels
, .list_labs = list(NULL)
# Plots
, .bar = F
, .lollipop = T
, .dbl_lollipop.size = 5.4
# Facets
, .sym_facets = NULL
, .int_facets = NULL
# Colors
, .scale_colors = list(
viridis::scale_color_viridis(discrete = T)
, viridis::scale_fill_viridis(discrete = T)
)
, .chr_manual.pal = NULL
, .chr_manual.aes = c('fill','color')
# Legend
, .list_legend = list(NULL)
# Axis
, .int_breaks.y = 5
, .int_decimals.y = 2
, .chr_format.y = NULL
, .coord_flip = T
, .coord_polar = F
# Theme
, .theme = ggridges::theme_ridges()
){
# Errors
# Data frame
if(!is.data.frame(.df_data)){
stop("'.df_data' must be a data frame.")
}
# Logical
if(!is.logical(.bar)){
stop("'.bar' must be either TRUE or FALSE.")
}
if(!is.logical(.lollipop)){
stop("'.lollipop' must be either TRUE or FALSE.")
}
# Numeric
if(!(!length(.dbl_lollipop.size) | is.numeric(.dbl_lollipop.size))){
stop("'.dbl_lollipop.size' must be an integer.")
}
# Quo vars
enquo(.sym_facets) -> enq_facets
# Facets
fun_facets(
.enq_facets = enq_facets
, .int_facets = .int_facets
) -> plt_facets
# Colors
fun_colors(
.scale_color = .scale_colors
, .chr_manual.pal = .chr_manual.pal
, .chr_manual.aes = .chr_manual.aes
) -> plt_colors
# Axis format
fun_axis.format(
# X axis is categorical
.chr_format.x = 'text'
# Y axis is numerical
, .int_breaks.y = .int_breaks.y
, .int_decimals.y = .int_decimals.y
, .chr_format.y = .chr_format.y
) -> list_axis.format
# Coordinates
if(.coord_flip){
coord_flip() -> plt_coord
} else {
NULL -> plt_coord
}
# Theme
fun_theme(.theme) -> plt_theme
# Legend
fun_legends(.list_legend) -> plt_legend
# Labs
fun_labs(.list_labs) -> plt_labs
# Bar chart
if(.bar){
.df_data %>%
# Plot
ggplot(.mapping) +
geom_col() +
plt_facets +
# Colors
plt_colors +
# Axis
list_axis.format$plt_format.x +
list_axis.format$plt_format.y +
# Coordinates
plt_coord +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_bar
} else {
NULL -> plt_bar
}
# Lollipop chart
if(.lollipop){
.df_data %>%
# Plot
ggplot(.mapping) +
geom_segment(
aes(y = 0)
, color = '#212121'
) +
geom_point(
size = .dbl_lollipop.size
, color = '#3854FB'
) +
plt_facets +
# Colors
plt_colors +
# Axis
list_axis.format$plt_format.x +
list_axis.format$plt_format.y +
# Coordinates
plt_coord +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_lollipop
} else {
NULL -> plt_lollipop
}
# Output
return(
compact(
list(
'bar' = plt_bar
, 'lollipop' = plt_lollipop
)))
}
# TEST --------------------------------------------------------------------
data("diamonds")
diamonds %>%
fun_dist.plot(
.mapping = aes(
x = price
# , color = color
, fill = color
)
# , .sym_facets = c(clarity, color)
, .theme = ggridges::theme_ridges()
, .list_labs = list(
title = 'Diamond Pricing'
, subtitle = 'How diamond princing varies with clarity and color'
, x = 'lalala'
, y = 'Frequency'
)
, .scale_colors = list(
scale_color_viridis_d(option = 'cividis')
, scale_fill_viridis_d(option = 'cividis')
)
, .list_legend = list(fill = 'none')
, .int_decimals.x = 0
, .int_decimals.y = 4
, .int_breaks.x = 3
, .int_breaks.y = 4
, .chr_format.y = NULL
, .chr_format.x = 'brl'
, .histogram = T
, .density = F
, .sym_facets = c(cut, clarity)
)
diamonds %>%
group_by(clarity, cut) %>%
summarise(price = mean(price)) %>%
ungroup() -> dsds
dsds %>%
fun_bar.plot(
.mapping = aes(
x = fct_reorder(cut, price)
, xend = cut
, y = price
, yend = price
# , color = cut
)
, .sym_facets = clarity
, .lollipop = T
, .bar = T
, .coord_flip = T
, .list_labs = list(
title = 'dsds'
, subtitle = 'lalala'
, x = 'Cut'
, y = 'Price (USD)'
)
, .chr_format.y = 'usd'
, .int_breaks.y = 15
)
geom_point(fill = 'red')
chr_fill <- 'red'
chr_fill <- 'red'
geom_point() -> dsds
diamonds %>%
ggplot(aes(
x = price
, fill = color
)) +
dsds +
facet_wrap(~ clarity)
diamonds %>%
ggplot(aes(
x = price
, y = carat
, fill = color
)) +
dsds +
facet_wrap(~ clarity)
diamonds %>%
ggplot(aes(
x = price
, y = carat
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = price
, y = depth
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = x
, y = y
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = price
, y = y
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = price
, y = z
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = price
, y = table
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = price
, y = price
, fill = color
)) +
dsds
diamonds %>%
ggplot(aes(
x = price
, y = carat
, fill = color
)) +
dsds
geom_point(fill = chr_fill) -> dsds
diamonds %>%
ggplot(aes(
x = price
, y = carat
, fill = color
)) +
dsds
geom_point(color, = chr_fill, fill = chr_fill) -> dsds
geom_point(color = chr_fill, fill = chr_fill) -> dsds
diamonds %>%
ggplot(aes(
x = price
, y = carat
, fill = color
)) +
dsds
