fun_plot.lollipop()
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
fun_plot.lollipop(
aes(
x = cut
, xend = cut
, y = price
)
)
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
fun_plot.lollipop(
aes(
x = cut
, xend = cut
, y = price
, yend = price
)
)
5.4 * 2.54
15 / 2.54
# LOLLIPOP CHART FUNCTION --------------------------------------------
fun_plot.lollipop <- function(
# Data
.df_data
, .mapping
# Labels
, .list_labs = list(NULL)
# Geom default parameters
, .list_geom.param = list(
color = '#3854FB'
, size = 5.4
)
# Facets
, .sym_facets = NULL
, .int_facets = NULL
# Colors
, .scale_colors = list(
viridis::scale_color_viridis(discrete = T)
, viridis::scale_fill_viridis(discrete = T)
)
, .chr_manual.pal = NULL
, .chr_manual.aes = 'fill'
# Legend
, .list_legend = list(NULL)
# Axis
, .int_breaks.y = 5
, .int_decimals.y = 2
, .chr_format.y = NULL
, .coord_flip = T
, .coord_polar = F
# Theme
, .theme = ggridges::theme_ridges()
){
# Errors
# Data frame
if(!is.data.frame(.df_data)){
stop("'.df_data' must be a data frame.")
}
# Quo vars
enquo(.sym_facets) -> enq_facets
# Aes Mapping
fun_aes.map(.mapping) -> aes_mapping
# Facets
fun_facets(
.enq_facets = enq_facets
, .int_facets = .int_facets
) -> plt_facets
# Color mapping
fun_colors(
.scale_color = .scale_colors
, .chr_manual.pal = .chr_manual.pal
, .chr_manual.aes = .chr_manual.aes
) -> plt_colors
# Axis format
fun_axis.format(
# X axis is categorical
.chr_format.x = 'text'
# Y axis is numerical
, .int_breaks.y = .int_breaks.y
, .int_decimals.y = .int_decimals.y
, .chr_format.y = .chr_format.y
) -> list_axis.format
# Coordinates
if(.coord_flip){
coord_flip() -> plt_coord
} else {
NULL -> plt_coord
}
# Theme
fun_theme(.theme) -> plt_theme
# Legend
fun_legends(.list_legend) -> plt_legend
# Labs
fun_labs(.list_labs) -> plt_labs
# Lollipop chart
# geom_point with default parameters
fun_geom.params(
.fun_geom = geom_point
, .list_default = .list_geom.param
, .aes_mapping = aes_mapping
) -> plt_geom
# geom_segment with hard-set parameters
geom_segment(
y = 0
, size = 1.11
, color = '#D4D5D8'
) -> plt_segment
# ggplot
.df_data %>%
# Plot
ggplot(aes_mapping) +
plt_segment +
plt_geom +
plt_facets +
# Colors
plt_colors +
# Axis
list_axis.format +
# Coordinates
plt_coord +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_lollipop
# Output
return(plt_lollipop)
}
diamonds %>%
fun_plot.bar(
.mapping = aes(
x = cut
, y = price
, fill = clarity
)
,
)
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
fun_plot.lollipop(
aes(
x = cut
, xend = cut
, y = price
, yend = price
)
)
paste0('x',seq(1:50))
seq(1,50)
paste0('x',seq(1,50))
tibble(
x = paste0('x',seq(1,50))
, y = seq(1,50)
)
tibble(
x = paste0('x',seq(1,50))
, y = seq(1,50)
) %>%
fun_plot.lollipop(
aes(
x = x
, xend = x
, y = y
, yend = y
)
)
tibble(
x = paste0('x',seq(1,50))
, y = seq(1,50)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
fun_plot.lollipop(
aes(
x = x
, xend = x
, y = y
, yend = y
)
)
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
fun_plot.lollipop(
aes(
x = x
, xend = x
, y = y
, yend = y
)
)
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
geom_segment(y = 0, size = 1.22) +
geom_point(size = 5.4)
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22) +
geom_point(size = 5.4)
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22) +
geom_point(size = 5.4) +
coord_flip()
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22, fill = 'red') +
geom_point(size = 5.4) +
coord_flip()
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22, fill = 'red') +
geom_point(size = 5.4) +
coord_flip()
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22, color = 'red') +
geom_point(size = 5.4) +
coord_flip()
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22, color = 'red') +
geom_point(size = 5.4, fill = 'blue') +
coord_flip()
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22, color = 'red') +
geom_point(size = 5.4, fill = 'blue') +
coord_flip()
tibble(
x = paste0('x',seq(1,50))
, y = rnorm(50, 12.8, 1.5)
) %>%
mutate(
x = fct_reorder(x, y)
) %>%
ggplot(aes(
x = x
, xend = x
, y = y
, yend = y
)) +
geom_segment(y = 0, size = 1.22, color = 'red') +
geom_point(size = 5.4, color = 'blue') +
coord_flip()
5 * 2.54
5.05 * 2.54
5.05 * 2.54
# LOLLIPOP CHART FUNCTION --------------------------------------------
fun_plot.lollipop <- function(
# Data
.df_data
, .mapping
# Labels
, .list_labs = list(NULL)
# Geom default parameters
, .list_geom.param = list(
color = '#3854FB'
, size = 5
)
# Facets
, .sym_facets = NULL
, .int_facets = NULL
# Colors
, .scale_colors = list(
viridis::scale_color_viridis(discrete = T)
, viridis::scale_fill_viridis(discrete = T)
)
, .chr_manual.pal = NULL
, .chr_manual.aes = 'fill'
# Legend
, .list_legend = list(NULL)
# Axis
, .int_breaks.y = 5
, .int_decimals.y = 2
, .chr_format.y = NULL
, .coord_flip = T
, .coord_polar = F
# Theme
, .theme = ggridges::theme_ridges()
){
# Errors
# Data frame
if(!is.data.frame(.df_data)){
stop("'.df_data' must be a data frame.")
}
# Quo vars
enquo(.sym_facets) -> enq_facets
# Aes Mapping
fun_aes.map(.mapping) -> aes_mapping
# Facets
fun_facets(
.enq_facets = enq_facets
, .int_facets = .int_facets
) -> plt_facets
# Color mapping
fun_colors(
.scale_color = .scale_colors
, .chr_manual.pal = .chr_manual.pal
, .chr_manual.aes = .chr_manual.aes
) -> plt_colors
# Axis format
fun_axis.format(
# X axis is categorical
.chr_format.x = 'text'
# Y axis is numerical
, .int_breaks.y = .int_breaks.y
, .int_decimals.y = .int_decimals.y
, .chr_format.y = .chr_format.y
) -> list_axis.format
# Coordinates
if(.coord_flip){
coord_flip() -> plt_coord
} else {
NULL -> plt_coord
}
# Theme
fun_theme(.theme) -> plt_theme
# Legend
fun_legends(.list_legend) -> plt_legend
# Labs
fun_labs(.list_labs) -> plt_labs
# Lollipop chart
# geom_point with default parameters
fun_geom.params(
.fun_geom = geom_point
, .list_default = .list_geom.param
, .aes_mapping = aes_mapping
) -> plt_geom
# geom_segment with hard-set parameters
geom_segment(
y = 0
, size = 1.21
, color = '#212121'
) -> plt_segment
# ggplot
.df_data %>%
# Plot
ggplot(aes_mapping) +
plt_segment +
plt_geom +
plt_facets +
# Colors
plt_colors +
# Axis
list_axis.format +
# Coordinates
plt_coord +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_lollipop
# Output
return(plt_lollipop)
}
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
fun_plot.lollipop(
aes(
x = cut
, xend = cut
, y = price
, yend = price
)
)
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
mutate(
cut = fct_reorder(cut, price)
) %>%
fun_plot.lollipop(
aes(
x = cut
, xend = cut
, y = price
, yend = price
)
)
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
# mutate(
#   cut = fct_reorder(cut, price)
# ) %>%
fun_plot.lollipop(
aes(
x = fct_reorder(cut, price)
, xend = fct_reorder(cut, price)
, y = price
, yend = price
)
)
diamonds %>%
group_by(cut) %>%
summarise(
price = mean(price)
) %>%
fun_plot.lollipop(
aes(
x = fct_reorder(cut, price)
, xend = fct_reorder(cut, price)
, y = price
, yend = price
)
)
