df_KNN.output.sub
# PACKAGES -----------------------------------------------------------------
pkg <- c(
# 'paletteer', 'ggthemes', 'scales' #Visualization
'readr', 'readxl','openxlsx' #Read and write utilities
, 'tidyverse', 'labelled' #Data wrangling
# , 'caret' #Variance filter
, 'psych' #Factor analysis
)
# Activate / install packages
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Package citation
# lapply(pkg, function(x)
#   {citation(package = x)})
# WORKING DIRECTORY -------------------------------------------------------
setwd('C:/Users/Cao/Documents/Github/Atlas-Research/Career-Choice-Models')
# AUTO-EFA FUNCTIONS ----------------------------------------------------------------
source('./Auto_EFA.R')
# DATA --------------------------------------------------------------------
# Occupations data frame
df_occupations <- readr::read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSphzWoCxoNaiaJcQUWKCMqUAT041Q8UqUgM7rSzIwYZb7FhttKJwNgtrFf-r7EgzXHFom4UjLl2ltk/pub?gid=563902602&single=true&output=csv')
# Labels character vector
chr_labels <- scan(
url('https://docs.google.com/spreadsheets/d/e/2PACX-1vSphzWoCxoNaiaJcQUWKCMqUAT041Q8UqUgM7rSzIwYZb7FhttKJwNgtrFf-r7EgzXHFom4UjLl2ltk/pub?gid=1223197022&single=true&output=csv')
, sep=','
, what = ''
, quiet = T
)
# Exploratory analyses
df_occupations %>% glimpse()
df_occupations %>% class()
df_occupations %>% head()
chr_labels %>% glimpse()
chr_labels %>% class()
chr_labels %>% head()
ncol(df_occupations) == length(chr_labels)
# Apply labels
df_occupations %>%
labelled::set_variable_labels(
.labels = chr_labels
) -> df_occupations
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, '_Skill')}) #All Skills only
# , -ends_with('.I') #Using recommended levels
, -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.skill
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Abilities.')}) #Abilities only
# , -ends_with('.I') #Using recommended levels
, -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.ablt
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Knowledge.')}) #Knowledge only
# , -ends_with('.I') #Using recommended levels
, -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.know
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Work_Context.')}) #Work contexts only
# , -ends_with('.I') #Using recommended levels
, -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.context
# VARIANCE PROPORTIONALITY ------------------------------------------------
df_occupations %>%
select(
colnames(
df_occupations.numeric.skill
)
, colnames(
df_occupations.numeric.ablt
)
, colnames(
df_occupations.numeric.know
)
, colnames(
df_occupations.numeric.context
)
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
)  -> df_occupations.numeric
df_occupations.numeric %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_occupations.var.total
df_occupations.numeric.skill %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_skills.var.total
df_occupations.numeric.ablt %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_ablt.var.total
df_occupations.numeric.know %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_know.var.total
df_occupations.numeric.context %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_context.var.total
# Variance proportionality (how much each category contributes to total variance)
sum(
dbl_skills.var.total
, dbl_ablt.var.total
, dbl_know.var.total
, dbl_context.var.total
) == dbl_occupations.var.total
dbl_skills.var.pct <- dbl_skills.var.total / dbl_occupations.var.total
dbl_ablt.var.pct <- dbl_ablt.var.total / dbl_occupations.var.total
dbl_know.var.pct <- dbl_know.var.total / dbl_occupations.var.total
dbl_context.var.pct <- dbl_context.var.total / dbl_occupations.var.total
# Define number of items in the questionnaire
# dbl_items.total <- 50
# dbl_items.total <- 30
# dbl_items.total <- 32
# dbl_items.total <- 40
# dbl_items.total <- 60
# Pick N items from each category in proportion to total variability
dbl_skills.items <- dbl_skills.var.pct * dbl_items.total
dbl_ablt.items <- dbl_ablt.var.pct * dbl_items.total
dbl_know.items <- dbl_know.var.pct * dbl_items.total
dbl_context.items <- dbl_context.var.pct * dbl_items.total
dbl_skills.items <- round(dbl_skills.items)
dbl_ablt.items <- round(dbl_ablt.items)
dbl_know.items <- round(dbl_know.items)
dbl_context.items <- round(dbl_context.items)
dbl_skills.items
dbl_ablt.items
dbl_know.items
dbl_context.items
sum(
dbl_skills.items
, dbl_ablt.items
, dbl_know.items
, dbl_context.items
)
# ITEMS PER CATEGORY PARAMETERS -------------------------------------------
# Manually define number of items
.int_n.items.total.skill <- 6
.int_n.items.total.ablt <- 12
.int_n.items.total.know <- 12
.int_n.items.total.context <- 15
df_occupations.numeric.context
df_occupations.numeric.context
df_occupations.numeric.know
df_occupations.numeric.ablt
df_occupations.numeric.skill
df_occupations
# VARIANCE PROPORTIONALITY ------------------------------------------------
df_occupations %>%
select(
colnames(
df_occupations.numeric.skill
)
, colnames(
df_occupations.numeric.ablt
)
, colnames(
df_occupations.numeric.know
)
, colnames(
df_occupations.numeric.context
)
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
)  -> df_occupations.numeric
df_occupations.numeric
df_occupations.numeric %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_occupations.var.total
df_occupations.numeric.skill %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_skills.var.total
df_occupations.numeric.ablt %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_ablt.var.total
df_occupations.numeric.know %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_know.var.total
df_occupations.numeric.context %>%
summarise(
across(
.cols = everything()
,.fns = var
)
) %>%
rowSums() -> dbl_context.var.total
# Variance proportionality (how much each category contributes to total variance)
sum(
dbl_skills.var.total
, dbl_ablt.var.total
, dbl_know.var.total
, dbl_context.var.total
) == dbl_occupations.var.total
dbl_skills.var.pct <- dbl_skills.var.total / dbl_occupations.var.total
dbl_ablt.var.pct <- dbl_ablt.var.total / dbl_occupations.var.total
dbl_know.var.pct <- dbl_know.var.total / dbl_occupations.var.total
dbl_context.var.pct <- dbl_context.var.total / dbl_occupations.var.total
# Define number of items in the questionnaire
# dbl_items.total <- 50
# dbl_items.total <- 30
# dbl_items.total <- 32
# dbl_items.total <- 40
dbl_items.total <- 45
# Pick N items from each category in proportion to total variability
dbl_skills.items <- dbl_skills.var.pct * dbl_items.total
dbl_ablt.items <- dbl_ablt.var.pct * dbl_items.total
dbl_know.items <- dbl_know.var.pct * dbl_items.total
dbl_context.items <- dbl_context.var.pct * dbl_items.total
dbl_skills.items <- round(dbl_skills.items)
dbl_ablt.items <- round(dbl_ablt.items)
dbl_know.items <- round(dbl_know.items)
dbl_context.items <- round(dbl_context.items)
dbl_skills.items
dbl_ablt.items
dbl_know.items
dbl_context.items
sum(
dbl_skills.items
, dbl_ablt.items
, dbl_know.items
, dbl_context.items
)
.int_n.items.total.skill <- 6
.int_n.items.total.ablt <- 12
.int_n.items.total.know <- 12
.int_n.items.total.context <- 15
# GLOBAL EFA PARAMETERS 8 ---------------------------------------------------
# Number of factors
.auto_select.nfactors <- T
# Minimum factor size
.int_min.factor_size <- 3
# Rotation (Oblique)
.chr_rotation <- 'promax'
# .chr_rotation <- 'oblimin'
# Rotation (Orthogonal)
# .chr_rotation <- 'varimax'
.remove_unacceptable_MSAi.items <- T
# Underloadings and crossloadings
.remove_under_loading.items <- T
.remove_cross_loading.items <- T
.dbl_under_loading.threshold <- 0.4
.dbl_cross_loading.threshold <- 0.3
# Diagrams and tests
.show_diagrams <- F
.show_results <- F
# FULLY AUTOMATED EFA WORKFLOW (WITH TOP ITEMS) --------------------------------------------
# All Skills
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.skill
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.skill
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Skill
# Abilities
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.ablt
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.ablt
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Ablt
# Knowledge
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.know
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.know
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Know
# Work context
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.context
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.context
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Context
# FULLY AUTOMATED EFA WORKFLOW (ONLY STAGE ONE) --------------------------------------------
# All Skills
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.skill
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Skill.1
# Abilities
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.ablt
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Ablt.1
# Knowledge
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.know
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Know.1
# Work context
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.context
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Context.1
# COMPARING ONE STAGE WITH TWO STAGE EFA --------------------------------
# Skills
EFA_Skill$best.model$EFA.top.items$reliability.evaluation
EFA_Skill.1$best.model$reliability.evaluation
EFA_Skill$best.models.evaluation %>% view()
EFA_Skill.1$best.models.evaluation %>% view()
EFA_Skill$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation %>% view()
EFA_Skill$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation %>% view()
# Abilities
EFA_Ablt$best.model$EFA.top.items$reliability.evaluation
EFA_Ablt.1$best.model$reliability.evaluation
EFA_Ablt$best.models.evaluation %>% view()
EFA_Ablt.1$best.models.evaluation %>% view()
EFA_Ablt$best.model$EFA.top.items$reliability.evaluation %>% view()
EFA_Ablt$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation %>% view()
EFA_Ablt$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation %>% view()
EFA_Ablt$EFA.workflow$EFA.top.items$EFA.4Factors$reliability.evaluation %>% view()
# Fields of Knowledge
EFA_Know$best.model$EFA.top.items$reliability.evaluation
EFA_Know.1$best.model$reliability.evaluation
EFA_Know$best.models.evaluation %>% view()
EFA_Know.1$best.models.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.4Factors$reliability.evaluation %>% view()
# Work context
EFA_Context$best.model$EFA.top.items$reliability.evaluation
EFA_Context.1$best.model$reliability.evaluation
EFA_Context$best.models.evaluation %>% view()
EFA_Context.1$best.models.evaluation %>% view()
EFA_Context$best.models.evaluation %>% view()
EFA_Context$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation %>% view()
EFA_Context$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation %>% view()
# TOP ITEMS ---------------------------------------------------------------
# Skills
# EFA_Skill$best.model$top.items %>% view()
EFA_Skill$EFA.workflow$top.items$EFA.2Factors %>% view()
# Abilities
# EFA_Ablt$best.model$top.items %>% view()
# EFA_Ablt$EFA.workflow$top.items$EFA.2Factors %>% view()
# EFA_Ablt$EFA.workflow$top.items$EFA.3Factors %>% view()
EFA_Ablt$EFA.workflow$top.items$EFA.4Factors %>% view()
# Knowledge
# EFA_Know$best.model$top.items %>% view()
# EFA_Know$EFA.workflow$top.items$EFA.3Factors %>% view()
EFA_Know$EFA.workflow$top.items$EFA.4Factors %>% view()
# Work context
# EFA_Context$best.model$top.items %>% view()
EFA_Context$EFA.workflow$top.items$EFA.3Factors %>% view()
