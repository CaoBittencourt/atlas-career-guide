bind_cols(lalala) %>%
select(
Occupation
, Career_Cluster
, Similarity.Cosine
) %>%
arrange(desc(Similarity.Cosine)) -> lalala
lalala %>% view()
lala
lalala
lala == lalala
all(lala == lalala)
lalala
acos(1)
acos(-1)
acos(0)
acos(1)
acos(0)
pi/2
pi/2 ==  acos(0)
# Angular similarity
lalala %>%
mutate(
Similarity.Angular = 1 - (acos(Similarity.Cosine)/pi)
)
# Angular similarity
lalala %>%
mutate(
Similarity.Angular = 1 - (acos(Similarity.Cosine)/pi)
) %>% view()
df_input.all
df_input.all %>%
filter(
# Name == 'Cao'
Name == 'Martijn'
) %>%
select(ends_with('.L')) %>%
mutate(
across(
.cols = ends_with('.L')
,.fns = function(x){
recode(x
, '1' = .0
, '2' = .25
, '3' = .5
, '4' = .75
, '5' = 1
)}
)
) -> df_input
df_input
df_input$Psychology.L
df_input$Biology.L
# Cosine => Pearson (normalize by subtracting the mean of the vector)
df_occupations %>%
select(
ends_with('.L')
) %>%
as.matrix() -> mtx_occupations
df_input %>%
as.matrix() -> mtx_input
sim2(
x = mtx_occupations
, y = mtx_input
, method = 'cosine'
# , norm = 'l2'
) %>%
# diag() %>%
as_tibble() -> lalala
names(lalala) <- 'Similarity.Cosine'
lalala
df_occupations %>%
bind_cols(lalala) %>%
select(
Occupation
, Career_Cluster
, Similarity.Cosine
) %>%
arrange(desc(Similarity.Cosine)) -> lalala
lalala %>% view()
# Angular similarity
lalala %>%
mutate(
Similarity.Angular = 1 - (acos(Similarity.Cosine)/pi)
) %>% view()
names(df_input)
.5^2
.1^2
1^2
1.5^2
1.25^2
.9^2
sqrt(.8)
sqrt(.9)
sqrt(.98)
sqrt(.7)
1 - .4^2
1 - .8^2
1 - .3^2
1 - 1^2
1 - 1.4^2
1 - 2^2
1 - .5^2
1 - sqrt(2)^2
sqrt(.2)
sqrt(.1)
1 - sqrt(2)^2/2
1 - (sqrt(2)^2)/2
1 - ((sqrt(2)^2)/2)
((sqrt(2)^2)/2)
sqrt(1 - ((sqrt(2)^2)/2))
round(((sqrt(2)^2)/2),2)
1 - round(((sqrt(2)^2)/2),2)
sqrt(1 - round(((sqrt(2)^2)/2),2))
1 - 1.2^2
1 - sqrt(2)^2
1 - .9^2
1 - 1^2
1 - .8^2
1 - .99^2
1 - .9^2
1 - .95^2
1 - .92^2
1 - .91^2
1 - .4^2
1 - .5^2
1 - .3^2
1 - .44^2
1 - .4^2
df_KNN.output.sub
rbind(
c(1, 0.4, 0.5)
, c(0.4, 1, 0.25)
, c(0.5, 0.25, 1)
)
mtx_cor <- rbind(
c(1, 0.4, 0.5)
, c(0.4, 1, 0.25)
, c(0.5, 0.25, 1)
)
mtx_cor[lower.tri(mtx_cor)]
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
mtx_cor
mtx_cor[lower.tri(mtx_cor)]
diag(mtx_cor)
mtx_cor[diag(mtx_cor)]
mtx_cor[-diag(mtx_cor)]
c(lower.tri(mtx_cor), upper.tri(mtx_cor))
mtx_cor[c(lower.tri(mtx_cor), upper.tri(mtx_cor))]
mtx_cor[lower.tri(mtx_cor)]
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
mtx_cor
mtx_cor[lower.tri(mtx_cor)] >= 0.9
lower.tri(mtx_cor)
mtx_cor[lower.tri(mtx_cor)]
mtx_cor
mtx_cor[lower.tri(mtx_cor)]
mtx_cor
mtx_cor[mtx_cor >= 0.9 ]
mtx_cor[mtx_cor >= 0.9]
mtx_cor - .9
mtx_cor[
mtx_cor < 0.9 |
mtx_cor == 1
]
mtx_cor[
mtx_cor < 0.9 |
mtx_cor == 1
] <- ''
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
mtx_cor[
mtx_cor < 0.9 |
mtx_cor == 1
] <- " "
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
mtx_cor[
mtx_cor < 0.9 |
mtx_cor == 1
] <- ""
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
mtx_cor[
mtx_cor < 0.9 |
mtx_cor == 1
] <- NULL
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
mtx_cor[
mtx_cor < 0.9 |
mtx_cor == 1
] <- NA
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor[
mtx_cor < 0.9
] <-
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor
mtx_cor[mtx_cor < 0.9] <- NA
mtx_cor
is.na(mtx_cor)
mtx_cor[!is.na(mtx_cor)]
drop(mtx_cor)
library(tidyverse)
mtx_cor %>% drop_na()
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor[mtx_cor < 0.9] <- NA
complete.cases(mtx_cor)
mtx_cor
complete.cases(mtx_cor * 0)
mtx_cor %>% na.omit()
mtx_cor
na.omit(mtx_cor)
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor[mtx_cor < 0.9] <- NA
na.omit(mtx_cor) -> dsds
mtx_cor
dsds
print(dsds)
mtx_cor[na.omit(mtx_cor)]
library(tidyverse)
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor[mtx_cor < 0.9] <- NA
mtx_cor[na.omit(mtx_cor)]
mtx_cor
?drop_na()
na.omit(mtx_cor) %>% class()
na.omit(mtx_cor) %>% class()
na.omit(mtx_cor) %>% summary()
na.omit(mtx_cor) %>% view
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.25)
, c(0.5, 0.25, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor
mtx_cor[mtx_cor < 0.9] <- NA
mtx_cor
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.95)
, c(0.5, 0.95, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor[mtx_cor < 0.9] <- NA
mtx_cor
mtx_cor[!is.na(mtx_cor)]
mtx_cor[,!is.na(mtx_cor)]
mtx_cor[!is.na(mtx_cor),]
mtx_cor
na.omit(mtx_cor)
na.omit(mtx_cor)[1]
na.omit(mtx_cor)[2]
na.omit(mtx_cor)[10]
na.omit(mtx_cor)
na.omit(mtx_cor)[20]
na.omit(mtx_cor) %>% plot()
as_tibble(mtx_cor)
as_tibble(mtx_cor) %>%
drop_na()
mtx_cor <- rbind(
c(1, 0.9, 0.5)
, c(0.9, 1, 0.95)
, c(0.5, 0.95, 1)
)
colnames(mtx_cor) <- c('F1','F2','F3')
rownames(mtx_cor) <- c('F1','F2','F3')
diag(mtx_cor) <- NA
mtx_cor[mtx_cor < 0.9] <- NA
mtx_cor[!is.na(mtx_cor)]
mtx_cor[
mtx_cor ==
mtx_cor[!is.na(mtx_cor)]
]
mtx_cor[mtx_cor == mtx_cor[!is.na(mtx_cor)]]
mtx_cor == mtx_cor[!is.na(mtx_cor)]
mtx_cor
mtx_cor[!is.na(mtx_cor)]
unique(mtx_cor[!is.na(mtx_cor)])
mtx_cor == unique(mtx_cor[!is.na(mtx_cor)])
# PACKAGES -----------------------------------------------------------------
pkg <- c(
# 'paletteer', 'ggthemes', 'scales' #Visualization
'readr', 'readxl','openxlsx' #Read and write utilities
, 'tidyverse', 'labelled' #Data wrangling
# , 'caret' #Variance filter
, 'psych' #Factor analysis
)
# Activate / install packages
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Package citation
# lapply(pkg, function(x)
#   {citation(package = x)})
# WORKING DIRECTORY -------------------------------------------------------
setwd('C:/Users/Cao/Documents/Github/Atlas-Research/Career-Choice-Models')
# AUTO-EFA FUNCTIONS ----------------------------------------------------------------
source('./Auto_EFA.R')
# DATA --------------------------------------------------------------------
# Occupations data frame
df_occupations <- readr::read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSphzWoCxoNaiaJcQUWKCMqUAT041Q8UqUgM7rSzIwYZb7FhttKJwNgtrFf-r7EgzXHFom4UjLl2ltk/pub?gid=563902602&single=true&output=csv')
# Labels character vector
chr_labels <- scan(
url('https://docs.google.com/spreadsheets/d/e/2PACX-1vSphzWoCxoNaiaJcQUWKCMqUAT041Q8UqUgM7rSzIwYZb7FhttKJwNgtrFf-r7EgzXHFom4UjLl2ltk/pub?gid=1223197022&single=true&output=csv')
, sep=','
, what = ''
, quiet = T
)
# Exploratory analyses
df_occupations %>% glimpse()
df_occupations %>% class()
df_occupations %>% head()
chr_labels %>% glimpse()
chr_labels %>% class()
chr_labels %>% head()
ncol(df_occupations) == length(chr_labels)
# Apply labels
df_occupations %>%
labelled::set_variable_labels(
.labels = chr_labels
) -> df_occupations
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, '_Skill')}) #All Skills only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.skill
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Abilities.')}) #Abilities only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.ablt
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Knowledge.')}) #Knowledge only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.know
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Work_Context.')}) #Work contexts only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.context
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Work_Activities.')}) #Work activities only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.activities
# ITEMS PER CATEGORY PARAMETERS 2 -------------------------------------------
# Manually define number of items
.int_n.items.total.skill <- 6
.int_n.items.total.ablt <- 9
.int_n.items.total.know <- 12
.int_n.items.total.context <- 21
.int_n.items.total.activities <- 12
# FACTOR ROTATIONS 2 ---------------------------------------------------------
# .chr_rotation.skill <- 'varimax'
.chr_rotation.skill <- 'promax'
.chr_rotation.ablt <- 'promax'
.chr_rotation.know <- 'varimax'
# .chr_rotation.know <- 'promax'
.chr_rotation.context <- 'varimax'
.chr_rotation.activities <- 'varimax'
# GLOBAL EFA PARAMETERS 7 ---------------------------------------------------
# Number of factors
.auto_select.nfactors <- T
# Minimum factor size
.int_min.factor_size <- 3
.remove_unacceptable_MSAi.items <- T
# Underloadings and crossloadings
.remove_under_loading.items <- T
.remove_cross_loading.items <- T
.dbl_under_loading.threshold <- 0.4
.dbl_cross_loading.threshold <- 0.2
# Diagrams and tests
.show_diagrams <- T
.show_results <- T
# Knowledge
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.know
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.know
, .chr_rotation = .chr_rotation.know
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Know
# Fields of Knowledge
EFA_Know$best.model$EFA.top.items$reliability.evaluation
EFA_Know$best.models.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.4Factors$reliability.evaluation %>% view()
# Knowledge
# EFA_Know$best.model$top.items %>% view()
EFA_Know$EFA.workflow$top.items$EFA.3Factors %>% view()
