select(
where(function(x){str_detect(attributes(x)$label, '_skill')}) #All Skills only
, -ends_with('.i') #Using recommended levels
# , -ends_with('.l') #Using importance levels
# ) %>%
) -> df_occupations.numeric.skill
df_occupations.numeric.skill
# ----- EFA ---------------------------------------------------------------
# FULLY AUTOMATED EFA WORKFLOW (ONLY STAGE ONE) --------------------------------------------
# Skills
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.skill
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation.skill
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_skill.1
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading -> dsds
df_occupations.numeric.skill
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, '_skill')}) #All Skills only
, -ends_with('.i') #Using recommended levels
# , -ends_with('.l') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.skill
# ----- EFA ---------------------------------------------------------------
# FULLY AUTOMATED EFA WORKFLOW (ONLY STAGE ONE) --------------------------------------------
# Skills
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.skill
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation.skill
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_skill.1
dsds
dsds == EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading
dsds
roudn(dsds,10) == round(EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading,10)
round(dsds,10) == round(EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading,10)
round(dsds,4) == round(EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading,4)
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading
dsds
dsds[1]
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading[1]
dsds[2]
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading[2]
dsds
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long$Loading
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long %>%
full_join(
tibble(
Factor = paste0('Factor',1:2)
, factor.label = c('discernment', 'technical skills')
# , factor.ai = c(0.17, 0.67)
# , factor.ai = c(0.17, 0.5)
# , factor.ai = c(0, 0.5)
# , factor.ai = c(0.17, 0.83)
, factor.ai = c(0.17/4, 0.83)
)
, multiple = 'all'
) %>%
ungroup() %>%
mutate(
# Loading = Loading - min(Loading)
# , Loading = Loading / max(Loading)
, item.ai = Loading * factor.ai
) %>%
group_by(Item) %>%
reframe(
item.ai = sum(item.ai)
, item.ai = pmax(item.ai, 0)
, item.ai = pmin(item.ai, 1)
) %>%
arrange(desc(item.ai)) %>%
print(n = nrow(.))
exp(0)
exp(1)
log(1)
log(0)
df_occupations.numeric.skill
log(df_occupations.numeric.skill)
log(df_occupations.numeric.skill*100)
# ----- EFA ---------------------------------------------------------------
# FULLY AUTOMATED EFA WORKFLOW (ONLY STAGE ONE) --------------------------------------------
# Skills
fun_best.model.workflow(
# Basic
.df_data.numeric = log(df_occupations.numeric.skill*100)
# , .auto_select.nfactors = .auto_select.nfactors
, .auto_select.nfactors = F
, .int_nfactors.vector = 2
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation.skill
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_skill.1
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long %>% view
source('C:/Users/Cao/Documents/Github/Atlas-Research/Functions/Factor_Scores.R')
df_occupations.numeric.skill
source('C:/Users/Cao/Documents/Github/Atlas-Research/Data/df_occupations.EFA.R')
fun_factor.scores2(
.df_data = df_occupations.numeric.skill
, .list_factor.keys = list_skill.factors
)
list_skill.factors
df_occupations.numeric.skill
fun_factor.scores2(
.df_data = df_occupations.numeric.skill
, .list_factor.keys = list_skill.factors
, .lgc_sample.averages = T
)
list(list_skill.factors)
fun_factor.scores2(
.df_data = df_occupations.numeric.skill
, .list_factor.keys = list(list_skill.factors)
, .lgc_sample.averages = T
)
flatten_chr(list_skill.factors)
list_skill.factors
list_factors
fun_factor.scores2(
.df_data = df_occupations.numeric.skill
, .list_factor.keys = list_factors
, .lgc_sample.averages = T
)
df_occupations.numeric.skill %>%
select(flatten_chr(list_factors))
flatten_chr(list_factors)
library(purrr)
flatten_chr(list_factors)
flatten_chr(list_factors)
list_factors %>%
flatten_chr()
list_factors %>%
flatten()
list_factors
list_factors %>%
flatten_chr()
list_factors
list_factors %>%
flatten()
list_factors %>%
flatten() %>%
flatten_chr()
list_factors
list_factors
list_factors %>%
flatten()
fun_factor.scores2(
.df_data =
df_occupations.numeric.skill %>%
select()
, .list_factor.keys = flatten(list_factors)
, .lgc_sample.averages = T
)
fun_factor.scores2(
.df_data =
df_occupations.numeric.skill
, .list_factor.keys = flatten(list_factors)
, .lgc_sample.averages = T
)
df_occupations.numeric.skill %>%
select(flatten(list_factors))
df_occupations.numeric.skill %>%
select(
flatten(list_factors) %>%
flatten_chr()
)
df_occupations.numeric.skill %>%
select(
flatten(list_skill.factors) %>%
flatten_chr()
)
flatten(list_skill.factors)
fun_factor.scores2(
.df_data =
df_occupations.numeric.skill %>%
select(
flatten(list_skill.factors) %>%
flatten_chr()
)
, .list_factor.keys = list_skill.factors
, .lgc_sample.averages = T
)
fun_factor.scores2(
.df_data =
df_occupations.numeric.skill %>%
select(
flatten(list_skill.factors) %>%
flatten_chr()
)
, .list_factor.keys = flatten(list_skill.factors)
, .lgc_sample.averages = T
)
fun_factor.scores2(
.df_data =
df_occupations.numeric.skill %>%
select(
flatten(list_skill.factors) %>%
flatten_chr()
)
, .list_factor.keys = flatten_chr(list_skill.factors)
, .lgc_sample.averages = T
)
flatten(list(list_skill.factors))
fun_factor.scores2(
.df_data =
df_occupations.numeric.skill %>%
select(
flatten(list_skill.factors) %>%
flatten_chr()
)
, .list_factor.keys = flatten(list(list_skill.factors))
, .lgc_sample.averages = T
)
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long %>% view
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$loadings.long %>%
full_join(
tibble(
Factor = paste0('Factor',1:2)
, factor.label = c('discernment', 'technical skills')
# , factor.ai = c(0.17, 0.67)
# , factor.ai = c(0.17, 0.5)
# , factor.ai = c(0, 0.5)
# , factor.ai = c(0.17, 0.83)
, factor.ai = c(0.17/4, 0.83)
)
, multiple = 'all'
) %>%
ungroup() %>%
mutate(
# Loading = Loading - min(Loading)
# , Loading = Loading / max(Loading)
, item.ai = Loading * factor.ai
) %>%
group_by(Item) %>%
reframe(
item.ai = sum(item.ai)
, item.ai = pmax(item.ai, 0)
, item.ai = pmin(item.ai, 1)
) %>%
arrange(desc(item.ai)) %>%
print(n = nrow(.))
?predict()
?predict.psych()
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
df_occupations.numeric.skill
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = df_occupations.numeric.skill
)
predict(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = df_occupations.numeric.skill
# , pred =
)
predict(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, data = df_occupations.numeric.skill
# , pred =
)
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, data = df_occupations.numeric.skill
# , pred =
)
diag
diag(1)
diag(3)
diag(3) %>%
rbind(c(1,0,0))
diag(3) %>%
rbind(c(1,0,0)) %>%
cor()
diag(3) %>%
cor()
rep(
c(1,0,0)
, 2
)
)
diag(3) %>%
rbind(
c(1,0,0)
, c(1,0,0)
, c(1,0,0)
)
diag(3) %>%
rbind(
c(1,0,0)
, c(1,0,0)
, c(1,0,0)
) %>%
cor()
diag(3) %>%
cor()
diag(3) %>%
rbind(
c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
) %>%
cor()
diag(3) %>%
cor()
diag(3) %>%
rbind(
c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
) %>%
cor()
diag(3) %>%
rbind(
c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
, c(1,0,0)
) %>%
cor()
nrow(df_occupations.numeric.skill)
ruinf(nrow(df_occupations.numeric.skill))
runif(nrow(df_occupations.numeric.skill))
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, data = df_occupations.numeric.skill
, pred = runif(nrow(df_occupations.numeric.skill))
)
predict(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, data = df_occupations.numeric.skill
, pred = runif(nrow(df_occupations.numeric.skill))
)
predict(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = df_occupations.numeric.skill
, pred = runif(nrow(df_occupations.numeric.skill))
)
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = df_occupations.numeric.skill
, pred = runif(nrow(df_occupations.numeric.skill))
)
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = df_occupations.numeric.skill
, runif(nrow(df_occupations.numeric.skill))
)
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = runif(nrow(df_occupations.numeric.skill))
, old.data = df_occupations.numeric.skill
)
predict.psych(
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
, data = runif(nrow(df_occupations.numeric.skill))
, old.data = df_occupations.numeric.skill
)
library(stats)
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings %>%
broom::tidy()
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings %>%
unlist()
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings %>%
unlist() %>%
broom::tidy()
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings %>%
as.list()
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings %>%
as.list() %>%
broom::tidy()
installed.packages('stats')
installed.packages('stats')
update.packages('stats')
library(stats)
?predict()
old.packages()
install.packages('stats')
install.packages('stats')
install.packages("stats")
installed.packages()
installed.packages() %>%class
installed.packages('stats')
package_version('stats')
package_version(stats)
library(stats)
install.packages(c("bit", "blob", "blsR", "broom", "bslib", "cachem", "callr", "car", "caret", "checkmate", "cli", "clue", "colorspace", "commonmark", "confintr", "cpp11", "crplyr", "crunch", "curl", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "extrafont", "FactoMineR", "fansi", "fastmap", "fBasics", "flextable", "float", "FNN", "fontawesome", "foreign", "Formula", "fs", "future", "future.apply", "gargle", "gdtools", "gert", "GetDFPData2", "ggplot2", "ggpp", "ggrepel", "gh", "glmnet", "globals", "googledrive", "googlesheets4", "gower", "graphlayouts", "gss", "gtable", "hardhat", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "ipred", "isoband", "ivreg", "jpeg", "jsonify", "knitr", "labelled", "lava", "listenv", "lme4", "maps", "maptools", "markdown", "Matrix", "matrixStats", "mgcv", "microbenchmark", "minpack.lm", "minqa", "mnormt", "modelr", "multcompView", "nleqslv", "nlme", "numbers", "officer", "openssl", "openxlsx", "paletteer", "parallelly", "pbkrtest", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "polyclip", "processx", "prodlim", "progressr", "proj4", "ps", "psych", "quantreg", "randtoolbox", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "recipes", "repr", "reticulate", "RhpcBLASctl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "rsparse", "Rttf2pt1", "sass", "scatterplot3d", "shiny", "skimr", "SnowballC", "sourcetools", "sp", "stringi", "survival", "svglite", "sys", "systemfit", "testthat", "text2vec", "tibble", "tidygraph", "timeDate", "tinytex", "triebeard", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("cli", "dplyr", "fansi", "fs", "GetDFPData2", "haven", "lme4", "microbenchmark", "numbers", "recipes", "rlang", "rsparse", "SnowballC", "tibble", "utf8", "vctrs", "vroom", "xml2"))
EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model$loadings
