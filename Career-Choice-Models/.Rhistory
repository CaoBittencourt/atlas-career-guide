# ungroup() %>%
select(
ends_with('.sub')
) %>%
rename_with(
function(x){str_remove(x,'.sub')}
) -> df_input.sub
# # [BAD] [PERFECT] OVERQUALIFICATION INPUT (SCORE > VALUE) -------------------------------------------------
# df_input %>%
#   rename_with(
#     .fn = function(x){paste0(x,'.input')}
#   ) %>%
#   bind_cols(
#     df_occupations
#   ) %>%
#   group_by(Occupation) %>%
#   mutate(
#     across(
#       .cols = c(
#         !ends_with('.input')
#         , -Career_Cluster
#       )
#       ,.fns = function(x){
#
#         min(x, eval(sym(paste0(cur_column(),'.input'))))
#
#       }
#       , .names = '{col}.sub'
#     )
#   ) %>%
#   ungroup() %>%
#   select(
#     ends_with('.sub')
#   ) %>%
#   rename_with(
#     function(x){str_remove(x,'.sub')}
#   ) -> df_input.sub
# # [TRY AGAIN] [N-TIMES] OVERQUALIFICATION INPUT (SCORE >= N*VALUE) -------------------------------------------------
# n <- 4
#
# df_input %>%
#   rename_with(
#     .fn = function(x){paste0(x,'.input')}
#   ) %>%
#   bind_cols(
#     df_occupations
#   ) %>%
#   group_by(Occupation) %>%
#   mutate(
#     across(
#       .cols = c(
#         !ends_with('.input')
#         # , -Occupation
#         , -Career_Cluster
#       )
#       ,.fns = function(x){
#
#         ifelse(
#           n*x <= eval(sym(paste0(cur_column(),'.input')))
#           , yes = x
#           , no = eval(sym(paste0(cur_column(),'.input')))
#         )
#
#       }
#       , .names = '{col}.sub'
#     )
#   ) %>%
#   ungroup() %>%
#   select(
#     ends_with('.sub')
#   ) %>%
#   rename_with(
#     function(x){str_remove(x,'.sub')}
#   ) -> df_input.sub
# KNN MATCHING WITHOUT ITEM SCORES ----------------------------------------
lapply(
1:nrow(df_input.sub)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations[x,]
, .vec_query.numeric = df_input.sub[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(desc(Similarity.Common)) -> df_KNN.output.sub
# SCORE ITEMS (OCCUPATIONS) -----------------------------------------------
psych::scoreVeryFast(
keys = flatten(list_factors)
, items = df_occupations %>%
select(
all_of(
list_factors %>%
flatten() %>%
flatten_chr()
)
)
, totals = F #Average scores
) %>%
as_tibble() %>%
bind_cols(
df_occupations
) %>%
select(
where(
negate(is.numeric)
)
, list_factors %>%
flatten() %>%
names()
) -> df_occupations.scores
# SCORE ITEMS (JSON INPUT) -----------------------------------------------
lapply(
list_factors
, function(scales){
psych::scoreVeryFast(
keys = scales
, items = df_input.sub
, totals = F #Average scores
) %>%
as_tibble()
}
) %>% flatten_df() -> df_factor.scores
# KNN MATCHING WITH ITEM SCORES -------------------------------------------
lapply(
1:nrow(df_factor.scores)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations.scores[x,]
, .vec_query.numeric = df_factor.scores[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(desc(Similarity.Common)) -> df_KNN.output.sub.scores
df_KNN.output.sub.scores %>%
select(
Occupation
, Career_Cluster
, starts_with('Similarity')
) %>%
view()
# OUTPUT ------------------------------------------------------------------
df_KNN.output.sub %>%
select(
Occupation
, Career_Cluster
, starts_with('Similarity')
) %>%
view()
# For this example, use Martijn' questionnaire
df_input.all %>%
# filter(Name == 'Acilio') %>%
# filter(Name == 'Alexandre') %>%
# filter(Name == 'Cao') %>%
# filter(Name == 'Felipe') %>%
# filter(Name == 'Gabriel') %>%
# filter(Name == 'Martijn') %>%
# filter(Name == 'Maurício') %>%
# filter(Name == 'Milena') %>%
filter(Name == 'Tatiana') %>%
# filter(Name == 'Uelinton') %>%
select(-Name) -> df_input
# [GOOD] [IRRELEVANT QUALIFICATION] OVERQUALIFICATION INPUT (ONLY IF SCORE == 0) -------------------------------------------------
df_input %>%
rename_with(
.fn = function(x){paste0(x,'.input')}
) %>%
bind_cols(
df_occupations
) %>%
# group_by(Occupation) %>%
mutate(
across(
.cols = c(
!ends_with('.input')
, -Occupation
, -Career_Cluster
)
,.fns = function(x){
ifelse(
x == 0
, yes = 0
, no = eval(sym(paste0(cur_column(),'.input')))
)
}
, .names = '{col}.sub'
)
) %>%
# ungroup() %>%
select(
ends_with('.sub')
) %>%
rename_with(
function(x){str_remove(x,'.sub')}
) -> df_input.sub
# # [BAD] [PERFECT] OVERQUALIFICATION INPUT (SCORE > VALUE) -------------------------------------------------
# df_input %>%
#   rename_with(
#     .fn = function(x){paste0(x,'.input')}
#   ) %>%
#   bind_cols(
#     df_occupations
#   ) %>%
#   group_by(Occupation) %>%
#   mutate(
#     across(
#       .cols = c(
#         !ends_with('.input')
#         , -Career_Cluster
#       )
#       ,.fns = function(x){
#
#         min(x, eval(sym(paste0(cur_column(),'.input'))))
#
#       }
#       , .names = '{col}.sub'
#     )
#   ) %>%
#   ungroup() %>%
#   select(
#     ends_with('.sub')
#   ) %>%
#   rename_with(
#     function(x){str_remove(x,'.sub')}
#   ) -> df_input.sub
# # [TRY AGAIN] [N-TIMES] OVERQUALIFICATION INPUT (SCORE >= N*VALUE) -------------------------------------------------
# n <- 4
#
# df_input %>%
#   rename_with(
#     .fn = function(x){paste0(x,'.input')}
#   ) %>%
#   bind_cols(
#     df_occupations
#   ) %>%
#   group_by(Occupation) %>%
#   mutate(
#     across(
#       .cols = c(
#         !ends_with('.input')
#         # , -Occupation
#         , -Career_Cluster
#       )
#       ,.fns = function(x){
#
#         ifelse(
#           n*x <= eval(sym(paste0(cur_column(),'.input')))
#           , yes = x
#           , no = eval(sym(paste0(cur_column(),'.input')))
#         )
#
#       }
#       , .names = '{col}.sub'
#     )
#   ) %>%
#   ungroup() %>%
#   select(
#     ends_with('.sub')
#   ) %>%
#   rename_with(
#     function(x){str_remove(x,'.sub')}
#   ) -> df_input.sub
# KNN MATCHING WITHOUT ITEM SCORES ----------------------------------------
lapply(
1:nrow(df_input.sub)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations[x,]
, .vec_query.numeric = df_input.sub[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(desc(Similarity.Common)) -> df_KNN.output.sub
# SCORE ITEMS (OCCUPATIONS) -----------------------------------------------
psych::scoreVeryFast(
keys = flatten(list_factors)
, items = df_occupations %>%
select(
all_of(
list_factors %>%
flatten() %>%
flatten_chr()
)
)
, totals = F #Average scores
) %>%
as_tibble() %>%
bind_cols(
df_occupations
) %>%
select(
where(
negate(is.numeric)
)
, list_factors %>%
flatten() %>%
names()
) -> df_occupations.scores
# SCORE ITEMS (JSON INPUT) -----------------------------------------------
lapply(
list_factors
, function(scales){
psych::scoreVeryFast(
keys = scales
, items = df_input.sub
, totals = F #Average scores
) %>%
as_tibble()
}
) %>% flatten_df() -> df_factor.scores
# KNN MATCHING WITH ITEM SCORES -------------------------------------------
lapply(
1:nrow(df_factor.scores)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations.scores[x,]
, .vec_query.numeric = df_factor.scores[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(desc(Similarity.Common)) -> df_KNN.output.sub.scores
df_KNN.output.sub.scores %>%
select(
Occupation
, Career_Cluster
, starts_with('Similarity')
) %>%
view()
# For this example, use Martijn' questionnaire
df_input.all %>%
# filter(Name == 'Acilio') %>%
# filter(Name == 'Alexandre') %>%
# filter(Name == 'Cao') %>%
# filter(Name == 'Felipe') %>%
# filter(Name == 'Gabriel') %>%
filter(Name == 'Martijn') %>%
# filter(Name == 'Maurício') %>%
# filter(Name == 'Milena') %>%
# filter(Name == 'Tatiana') %>%
# filter(Name == 'Uelinton') %>%
select(-Name) -> df_input
# [GOOD] [IRRELEVANT QUALIFICATION] OVERQUALIFICATION INPUT (ONLY IF SCORE == 0) -------------------------------------------------
df_input %>%
rename_with(
.fn = function(x){paste0(x,'.input')}
) %>%
bind_cols(
df_occupations
) %>%
# group_by(Occupation) %>%
mutate(
across(
.cols = c(
!ends_with('.input')
, -Occupation
, -Career_Cluster
)
,.fns = function(x){
ifelse(
x == 0
, yes = 0
, no = eval(sym(paste0(cur_column(),'.input')))
)
}
, .names = '{col}.sub'
)
) %>%
# ungroup() %>%
select(
ends_with('.sub')
) %>%
rename_with(
function(x){str_remove(x,'.sub')}
) -> df_input.sub
# # [BAD] [PERFECT] OVERQUALIFICATION INPUT (SCORE > VALUE) -------------------------------------------------
# df_input %>%
#   rename_with(
#     .fn = function(x){paste0(x,'.input')}
#   ) %>%
#   bind_cols(
#     df_occupations
#   ) %>%
#   group_by(Occupation) %>%
#   mutate(
#     across(
#       .cols = c(
#         !ends_with('.input')
#         , -Career_Cluster
#       )
#       ,.fns = function(x){
#
#         min(x, eval(sym(paste0(cur_column(),'.input'))))
#
#       }
#       , .names = '{col}.sub'
#     )
#   ) %>%
#   ungroup() %>%
#   select(
#     ends_with('.sub')
#   ) %>%
#   rename_with(
#     function(x){str_remove(x,'.sub')}
#   ) -> df_input.sub
# # [TRY AGAIN] [N-TIMES] OVERQUALIFICATION INPUT (SCORE >= N*VALUE) -------------------------------------------------
# n <- 4
#
# df_input %>%
#   rename_with(
#     .fn = function(x){paste0(x,'.input')}
#   ) %>%
#   bind_cols(
#     df_occupations
#   ) %>%
#   group_by(Occupation) %>%
#   mutate(
#     across(
#       .cols = c(
#         !ends_with('.input')
#         # , -Occupation
#         , -Career_Cluster
#       )
#       ,.fns = function(x){
#
#         ifelse(
#           n*x <= eval(sym(paste0(cur_column(),'.input')))
#           , yes = x
#           , no = eval(sym(paste0(cur_column(),'.input')))
#         )
#
#       }
#       , .names = '{col}.sub'
#     )
#   ) %>%
#   ungroup() %>%
#   select(
#     ends_with('.sub')
#   ) %>%
#   rename_with(
#     function(x){str_remove(x,'.sub')}
#   ) -> df_input.sub
# KNN MATCHING WITHOUT ITEM SCORES ----------------------------------------
lapply(
1:nrow(df_input.sub)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations[x,]
, .vec_query.numeric = df_input.sub[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(desc(Similarity.Common)) -> df_KNN.output.sub
# SCORE ITEMS (OCCUPATIONS) -----------------------------------------------
psych::scoreVeryFast(
keys = flatten(list_factors)
, items = df_occupations %>%
select(
all_of(
list_factors %>%
flatten() %>%
flatten_chr()
)
)
, totals = F #Average scores
) %>%
as_tibble() %>%
bind_cols(
df_occupations
) %>%
select(
where(
negate(is.numeric)
)
, list_factors %>%
flatten() %>%
names()
) -> df_occupations.scores
# SCORE ITEMS (JSON INPUT) -----------------------------------------------
lapply(
list_factors
, function(scales){
psych::scoreVeryFast(
keys = scales
, items = df_input.sub
, totals = F #Average scores
) %>%
as_tibble()
}
) %>% flatten_df() -> df_factor.scores
# KNN MATCHING WITH ITEM SCORES -------------------------------------------
lapply(
1:nrow(df_factor.scores)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations.scores[x,]
, .vec_query.numeric = df_factor.scores[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(desc(Similarity.Common)) -> df_KNN.output.sub.scores
df_KNN.output.sub.scores %>%
select(
Occupation
, Career_Cluster
, starts_with('Similarity')
) %>%
view()
