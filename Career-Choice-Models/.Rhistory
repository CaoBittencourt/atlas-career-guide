, int_nfactors.max = int_nfactors.max
, int_n.items = int_n.items
, chr_rotation = chr_rotation
# Underloadings and crossloadings
, remove_under_loading.items = remove_under_loading.items
, remove_cross_loading.items = remove_cross_loading.items
, dbl_under_loading.threshold = dbl_under_loading.threshold
, dbl_cross_loading.threshold = dbl_cross_loading.threshold
# Diagrams and tests
, show_diagrams = show_diagrams
, show_results = show_results
) -> list_EFA.multi.top_items
# Exclusion criteria
list_EFA.multi.top_items$reliability.metrics %>%
# 1. Unnecessary factors: if unused factors > 0, exclude model
filter(Unused_Factors == 0) %>%
# 2. Minimum items per factor: if min items per factor < int_min.factor_size, exclude model
filter(Items.Min >= int_min.factor_size) %>%
# 3. Minimum top items per factor: if min items per factor < n top items, exclude model
filter(Items.Min >= int_n.items) -> df_reliability
# 4. Reliability comparison
list_EFA.multi.top_items$reliability.evaluation %>%
filter(Model %in% df_reliability$Model) %>%
pivot_longer(
cols = -contains(c('Model', 'Factors', 'Items'))
, names_to = 'Metric'
, values_to = 'Value'
) %>%
group_by(
across(
contains(c('Model', 'Factors', 'Items'))
)
) %>%
count(Value, name = 'Count') %>%
group_by(Value) %>%
top_n(1, Count) %>%
group_by(Value) %>%
# Remove ties
filter(n() < 2) %>%
ungroup() -> df_reliability.best
if(nrow(df_reliability.best) > 1){
chr_reliability.priority <- c(
'Excellent' #1. Excellent indicators
, 'Good' #2. Good indicators
, 'Acceptable' #3. Acceptable indicators
, 'Ideal' #4. Ideal interitem correlations
, 'Questionable' #5. Questionable indicators
, 'Too similar' #6. Too similar interitem correlations
, 'Incoherent' #7. Weak interitem correlations
, 'Poor' #8. Poor indicators
, 'Unacceptable' #9. Unacceptable indicators
)
# Remove ties from priority vector
intersect(
chr_reliability.priority
, df_reliability.best$Value
) -> chr_reliability.priority
# Remaining first priority
chr_reliability.priority <- chr_reliability.priority[1]
# Take "best model" based on remaining top priority criterion
df_reliability.best %>%
filter(Value == chr_reliability.priority) %>%
return(.)
} -> df_reliability.best
return(df_reliability.best)
# list(
#   'EFA.workflow' = list_EFA.multi.top_items
#   , 'reliability' = df_reliability
# ) %>%
#   return(.)
}
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = F
, int_nfactors.min = 2
, int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = T
) -> lalala
lalala %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = T
) -> lalala
lalala %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = F
, remove_cross_loading.items = F
) -> lalala
lalala %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = F
, remove_cross_loading.items = T
) -> lalala
lalala %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.7
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = F
, remove_cross_loading.items = T
) -> lalala
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.7
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = T
) -> lalala
lalala %>% view()
#
#  [x] FULLY AUTOMATED EFA TOP ITEMS WORKFLOW FUNCTION ------------------------------------------------------
fun_best.model.multi.workflow <- function(
# Basic
df_data.numeric
, auto_select.nfactors = F
, int_min.factor_size = 3
, int_nfactors.min = 1
, int_nfactors.max = 5
, int_n.items = 3
, chr_rotation = 'promax'
# Underloadings and crossloadings
, remove_under_loading.items = T
, remove_cross_loading.items = F
, dbl_under_loading.threshold = 0.4 #Lesser than 0.4 loading = under loading
, dbl_cross_loading.threshold = 0.05 #Lesser than 0.05 loading difference = cross loading
# Diagrams and tests
, show_diagrams = T
, show_results = F
){
# Run multi EFA top items workflow
fun_top.items.multi.workflow(
# Basic
df_data.numeric = df_data.numeric
, auto_select.nfactors = auto_select.nfactors
, int_nfactors.min = int_nfactors.min
, int_nfactors.max = int_nfactors.max
, int_n.items = int_n.items
, chr_rotation = chr_rotation
# Underloadings and crossloadings
, remove_under_loading.items = remove_under_loading.items
, remove_cross_loading.items = remove_cross_loading.items
, dbl_under_loading.threshold = dbl_under_loading.threshold
, dbl_cross_loading.threshold = dbl_cross_loading.threshold
# Diagrams and tests
, show_diagrams = show_diagrams
, show_results = show_results
) -> list_EFA.multi.top_items
# Exclusion criteria
list_EFA.multi.top_items$reliability.metrics %>%
# 1. Unnecessary factors: if unused factors > 0, exclude model
filter(Unused_Factors == 0) %>%
# 2. Minimum items per factor: if min items per factor < int_min.factor_size, exclude model
filter(Items.Min >= int_min.factor_size) %>%
# 3. Minimum top items per factor: if min items per factor < n top items, exclude model
filter(Items.Min >= int_n.items) -> df_reliability
# 4. Reliability comparison
list_EFA.multi.top_items$reliability.evaluation %>%
filter(Model %in% df_reliability$Model) %>%
pivot_longer(
cols = -contains(c('Model', 'Factors', 'Items'))
, names_to = 'Metric'
, values_to = 'Value'
) %>%
group_by(
across(
contains(c('Model', 'Factors', 'Items'))
)
) %>%
count(Value, name = 'Count') %>%
group_by(Value) %>%
top_n(1, Count) %>%
group_by(Value) %>%
# Remove ties
filter(n() < 2) %>%
ungroup() -> df_reliability.best
# If there is still more than one model,
# take the one which has the highest count of quality indicators
if(nrow(df_reliability.best) > 1){
chr_reliability.priority <- c(
'Excellent' #1. Excellent indicators
, 'Good' #2. Good indicators
, 'Acceptable' #3. Acceptable indicators
, 'Ideal' #4. Ideal interitem correlations
, 'Questionable' #5. Questionable indicators
, 'Too similar' #6. Too similar interitem correlations
, 'Incoherent' #7. Weak interitem correlations
, 'Poor' #8. Poor indicators
, 'Unacceptable' #9. Unacceptable indicators
)
# Remove ties from priority vector
intersect(
chr_reliability.priority
, df_reliability.best$Value
) -> chr_reliability.priority
# Remaining first priority
chr_reliability.priority <- chr_reliability.priority[1]
# Take "best model" based on remaining top priority criterion
df_reliability.best %>%
filter(Value == chr_reliability.priority) %>%
return(.)
} -> df_reliability.best
# Output
list(
'EFA.workflow' = list_EFA.multi.top_items
, 'reliability' = df_reliability
# , 'best.model' = list_EFA.best
) %>%
return(.)
}
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 3
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = T
) -> lalala
lalala$reliability
lalala$reliability %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 5
, int_n.items = 5
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = T
) -> lalala
lalala %>% view()
lalala
lalala$reliability %>% view()
lalala$EFA.workflow$reliability.metrics %>% view()
#  [x] FULLY AUTOMATED EFA TOP ITEMS WORKFLOW FUNCTION ------------------------------------------------------
fun_best.model.multi.workflow <- function(
# Basic
df_data.numeric
, auto_select.nfactors = F
, int_min.factor_size = 3
, int_nfactors.min = 1
, int_nfactors.max = 5
, int_n.items = 3
, chr_rotation = 'promax'
# Underloadings and crossloadings
, remove_under_loading.items = T
, remove_cross_loading.items = F
, dbl_under_loading.threshold = 0.4 #Lesser than 0.4 loading = under loading
, dbl_cross_loading.threshold = 0.05 #Lesser than 0.05 loading difference = cross loading
# Diagrams and tests
, show_diagrams = T
, show_results = F
){
# Run multi EFA top items workflow
fun_top.items.multi.workflow(
# Basic
df_data.numeric = df_data.numeric
, auto_select.nfactors = auto_select.nfactors
, int_nfactors.min = int_nfactors.min
, int_nfactors.max = int_nfactors.max
, int_n.items = int_n.items
, chr_rotation = chr_rotation
# Underloadings and crossloadings
, remove_under_loading.items = remove_under_loading.items
, remove_cross_loading.items = remove_cross_loading.items
, dbl_under_loading.threshold = dbl_under_loading.threshold
, dbl_cross_loading.threshold = dbl_cross_loading.threshold
# Diagrams and tests
, show_diagrams = show_diagrams
, show_results = show_results
) -> list_EFA.multi.top_items
# Exclusion criteria
list_EFA.multi.top_items$reliability.metrics %>%
# 1. Unnecessary factors: if unused factors > 0, exclude model
filter(Unused_Factors == 0) %>%
# 2. Minimum items per factor: if min items per factor < int_min.factor_size, exclude model
filter(Items.Min >= int_min.factor_size) %>%
# 3. Minimum top items per factor: if min items per factor < n top items, exclude model
filter(Items.Min >= int_n.items) -> df_reliability
# 4. Reliability comparison
list_EFA.multi.top_items$reliability.evaluation %>%
filter(Model %in% df_reliability$Model) %>%
pivot_longer(
cols = -contains(c('Model', 'Factors', 'Items'))
, names_to = 'Metric'
, values_to = 'Value'
) %>%
group_by(
across(
contains(c('Model', 'Factors', 'Items'))
)
) %>%
count(Value, name = 'Count') %>%
group_by(Value) %>%
top_n(1, Count) %>%
group_by(Value) %>%
# Remove ties
filter(n() < 2) %>%
ungroup() -> df_reliability.best
# If there is still more than one model,
# take the one which has the highest count of quality indicators
if(nrow(df_reliability.best) > 1){
chr_reliability.priority <- c(
'Excellent' #1. Excellent indicators
, 'Good' #2. Good indicators
, 'Acceptable' #3. Acceptable indicators
, 'Ideal' #4. Ideal interitem correlations
, 'Questionable' #5. Questionable indicators
, 'Too similar' #6. Too similar interitem correlations
, 'Incoherent' #7. Weak interitem correlations
, 'Poor' #8. Poor indicators
, 'Unacceptable' #9. Unacceptable indicators
)
# Remove ties from priority vector
intersect(
chr_reliability.priority
, df_reliability.best$Value
) -> chr_reliability.priority
# Remaining first priority
chr_reliability.priority <- chr_reliability.priority[1]
# Take "best model" based on remaining top priority criterion
df_reliability.best %>%
filter(Value == chr_reliability.priority) %>%
return(.)
} -> df_reliability.best
# Best models
list_EFA.multi.top_items$reliability.evaluation %>%
filter(Model %in% df_reliability$Model) -> df_reliability.eval
# Most internally consistent model ("Best model")
list(
'EFA' = list_EFA.multi.top_items$EFA$EFA[df_reliability.best$Model]
, 'top.items' = list_EFA.multi.top_items$top.items[df_reliability.best$Model]
, 'EFA.top.items' = list_EFA.multi.top_items$EFA.top.items[df_reliability.best$Model]
) -> list_EFA.Best
# Overall reliability comparison
list_EFA.multi.top_items$reliability.metrics -> df_reliability.all
list_EFA.multi.top_items$reliability.evaluation -> df_reliability.eval.all
# Output
list(
'EFA.workflow' = list_EFA.multi.top_items
, 'best.model' = list_EFA.Best
, 'reliability.metrics' = df_reliability.all
, 'reliability.evaluation' = df_reliability.eval.all
, 'best.models.reliability' = df_reliability
, 'best.models.evaluation' = df_reliability.eval
) %>%
return(.)
}
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 4
, int_n.items = 4
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
lalala
lalala$reliability.metrics
lalala$reliability.metrics %>% view()
lalala$reliability.evaluation %>% view()
lalala$best.models.reliability %>% view()
lalala$best.models.evaluation %>% view()
df_occupations
# Only numeric variables
df_occupations %>%
select(
# where(function(x){str_detect(attributes(x)$label, '_Skills.')}) #Skills only
where(function(x){str_detect(attributes(x)$label, 'Knowledge.')}) #Skills only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.skills
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 4
, int_n.items = 4
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
lalala
lalala$reliability.metrics %>% view()
lalala$reliability.evaluation %>% view()
lalala$best.models.evaluation %>% view()
lalala$best.models.reliability %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 3
, int_n.items = 2
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
lalala$reliability.metrics %>% view()
lalala$reliability.evaluation %>% view()
lalala$best.models.evaluation %>% view()
lalala$best.models.reliability %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 4
, int_n.items = 2
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
lalala$best.models.evaluation %>% view()
lalala$reliability.evaluation %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
# , int_nfactors.min = 2
# , int_nfactors.max = 3
, int_min.factor_size = 2
, int_n.items = 2
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
lalala$reliability.evaluation %>% view()
lalala$best.models.evaluation %>% view()
lalala$best.models.reliability %>% view()
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = T
, int_nfactors.min = 1
, int_nfactors.max = 8
, int_min.factor_size = 2
, int_n.items = 2
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
fun_best.model.multi.workflow(
df_data.numeric = df_occupations.numeric.skills
, auto_select.nfactors = F
, int_nfactors.min = 1
, int_nfactors.max = 8
, int_min.factor_size = 2
, int_n.items = 2
, dbl_under_loading.threshold = 0.4
, dbl_cross_loading.threshold = 0.05
, remove_under_loading.items = T
, remove_cross_loading.items = F
) -> lalala
lalala$best.models.reliability %>% view()
lalala$reliability.evaluation %>% view()
