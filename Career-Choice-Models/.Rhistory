)
, item.impact.rate =
if_else(
item.score == 0
, (item.score2 - item.score) /
dbl_scale.ub
, (item.score2 - item.score) /
item.score
)
, item.impact.rate = pmax(
item.impact.rate
, dbl_impact.lb
)
, item.impact.rate = pmin(
item.impact.rate
, dbl_impact.ub
)
) -> df_impact
# Aggregate results
df_impact.agg <- NULL
df_impact.all <- NULL
if(.lgc_aggregate){
df_impact %>%
group_by(
across(c(
-where(is.numeric)
, -item
))) %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.agg
df_impact %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.all
}
# Output
return(compact(list(
'items.impact' = df_impact
, 'aggregate.impact' = df_impact.agg
, 'overall.impact' = df_impact.all
, 'factors.impact' = .df_factors.impact
, 'data' = df_data.long
, 'scale.lb' = dbl_scale.lb
, 'scale.ub' = dbl_scale.ub
, 'impact.lb' = dbl_impact.lb
, 'impact.ub' = dbl_impact.ub
)))
}
# DSDS --------------------------------------------------------------------
fun_EFA.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .efa_model = EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, .df_factors.impact = df_impact
, .dbl_scale.lb = 0
, .dbl_scale.ub = 100
, .dbl_impact.lb = -Inf
, .dbl_impact.ub = Inf
, .lgc_aggregate = T
) -> dsds
dsds$aggregate.impact
dsds$overall.impact
dsds$items.impact
# [FUNCTION] EFA-BASED IMPACT ANALYSIS ----------------------------------------------
fun_EFA.impact <- function(
# Data
.df_data
# Factor loadings
, .efa_model
# Factor impact
, .df_factors.impact
# Scale truncation
, .dbl_scale.lb = 0
, .dbl_scale.ub = 100
# Impact truncation
, .dbl_impact.lb = -Inf
, .dbl_impact.ub = Inf
# Aggregate results
, .lgc_aggregate = F
){
# Arguments validation
stopifnot(
"'.efa_model' must be a 'factanal' object returned from the factanal function." =
str_to_lower(class(
.efa_model
)) == 'factanal'
)
stopifnot(
"'.df_data' must be a data frame containing item scores." =
all(
is.data.frame(.df_data)
, any(
loadings(.efa_model)[,] %>%
rownames() %in%
names(.df_data)
)))
stopifnot(
"'.df_factors.impact' must be a data frame in long format containing factor impact evaluations." =
all(
is.data.frame(.df_factors.impact)
, c('factor', 'factor.impact') %in%
names(.df_factors.impact)
, loadings(.efa_model)[,] %>%
colnames() %in%
.df_factors.impact$factor
, is.numeric(
.df_factors.impact$factor.impact
)
))
stopifnot(
"'.dbl_scale.lb' must be numeric." =
is.numeric(.dbl_scale.lb)
)
stopifnot(
"'.dbl_scale.ub' must be numeric." =
is.numeric(.dbl_scale.ub)
)
stopifnot(
"'.dbl_impact.lb' must be numeric." =
is.numeric(.dbl_impact.lb)
)
stopifnot(
"'.dbl_impact.lb' must be numeric." =
is.numeric(.dbl_impact.lb)
)
# Data wrangling
.dbl_scale.lb[[1]] -> dbl_scale.lb
.dbl_scale.ub[[1]] -> dbl_scale.ub
.dbl_impact.lb[[1]] -> dbl_impact.lb
.dbl_impact.ub[[1]] -> dbl_impact.ub
.df_data %>%
select(
!where(is.numeric)
, any_of(
loadings(.efa_model)[,] %>%
rownames()
)) %>%
pivot_longer(
cols = is.numeric
, names_to = 'item'
, values_to = 'item.score'
) %>%
mutate(
item.score = pmax(
item.score
, dbl_scale.lb
)
, item.score = pmin(
item.score
, dbl_scale.ub
)
) -> df_data.long
loadings(.efa_model)[,] %>%
as_tibble(rownames = 'item') %>%
pivot_longer(
cols = !item
, names_to = 'factor'
, values_to = 'factor.loading'
) -> df_loadings.long
df_data.long %>%
full_join(df_loadings.long) %>%
full_join(.df_factors.impact) %>%
mutate(
factor.impact = pmax(
factor.impact
, -dbl_scale.ub
)
, factor.impact = pmin(
factor.impact
, dbl_scale.ub
)
) -> df_loadings.long
# Calculate net impact
df_loadings.long %>%
group_by(
across(c(
-where(is.numeric)
, -factor
))) %>%
reframe(
item.score = item.score
, item.impact =
sum(
factor.loading *
factor.impact
)
) %>%
group_by(
across(c(
-where(is.numeric)
))) %>%
slice(1) %>%
ungroup() %>%
mutate(
.after = item.score
, item.score2 =
item.score +
item.impact
, item.score2 = pmax(
item.score2
, dbl_scale.lb
)
, item.score2 = pmin(
item.score2
, dbl_scale.ub
)
, item.impact.rate =
if_else(
item.score == 0
, (item.score2 - item.score) /
dbl_scale.ub
, (item.score2 - item.score) /
item.score
)
, item.impact.rate = pmax(
item.impact.rate
, dbl_impact.lb
)
, item.impact.rate = pmin(
item.impact.rate
, dbl_impact.ub
)
) -> df_impact
# Aggregate results
df_impact.items <- NULL
df_impact.agg <- NULL
df_impact.all <- NULL
if(.lgc_aggregate){
df_impact %>%
group_by(
across(c(
-where(is.numeric)
, -item
))) %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.agg
df_impact %>%
group_by(item) %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.items
df_impact %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.all
}
# Output
return(compact(list(
'individual.impact' = df_impact
, 'items.impact' = df_impact
, 'aggregate.impact' = df_impact.agg
, 'overall.impact' = df_impact.all
, 'factors.impact' = .df_factors.impact
, 'data' = df_data.long
, 'scale.lb' = dbl_scale.lb
, 'scale.ub' = dbl_scale.ub
, 'impact.lb' = dbl_impact.lb
, 'impact.ub' = dbl_impact.ub
)))
}
# DSDS --------------------------------------------------------------------
fun_EFA.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .efa_model = EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, .df_factors.impact = df_impact
, .dbl_scale.lb = 0
, .dbl_scale.ub = 100
, .dbl_impact.lb = -Inf
, .dbl_impact.ub = Inf
, .lgc_aggregate = T
) -> dsds
dsds$individual.impact
dsds$items.impact
dsds$individual.impact
dsds$items.impact
dsds$individual.impact
# [FUNCTION] EFA-BASED IMPACT ANALYSIS ----------------------------------------------
fun_EFA.impact <- function(
# Data
.df_data
# Factor loadings
, .efa_model
# Factor impact
, .df_factors.impact
# Scale truncation
, .dbl_scale.lb = 0
, .dbl_scale.ub = 100
# Impact truncation
, .dbl_impact.lb = -Inf
, .dbl_impact.ub = Inf
# Aggregate results
, .lgc_aggregate = F
){
# Arguments validation
stopifnot(
"'.efa_model' must be a 'factanal' object returned from the factanal function." =
str_to_lower(class(
.efa_model
)) == 'factanal'
)
stopifnot(
"'.df_data' must be a data frame containing item scores." =
all(
is.data.frame(.df_data)
, any(
loadings(.efa_model)[,] %>%
rownames() %in%
names(.df_data)
)))
stopifnot(
"'.df_factors.impact' must be a data frame in long format containing factor impact evaluations." =
all(
is.data.frame(.df_factors.impact)
, c('factor', 'factor.impact') %in%
names(.df_factors.impact)
, loadings(.efa_model)[,] %>%
colnames() %in%
.df_factors.impact$factor
, is.numeric(
.df_factors.impact$factor.impact
)
))
stopifnot(
"'.dbl_scale.lb' must be numeric." =
is.numeric(.dbl_scale.lb)
)
stopifnot(
"'.dbl_scale.ub' must be numeric." =
is.numeric(.dbl_scale.ub)
)
stopifnot(
"'.dbl_impact.lb' must be numeric." =
is.numeric(.dbl_impact.lb)
)
stopifnot(
"'.dbl_impact.lb' must be numeric." =
is.numeric(.dbl_impact.lb)
)
# Data wrangling
.dbl_scale.lb[[1]] -> dbl_scale.lb
.dbl_scale.ub[[1]] -> dbl_scale.ub
.dbl_impact.lb[[1]] -> dbl_impact.lb
.dbl_impact.ub[[1]] -> dbl_impact.ub
.df_data %>%
select(
!where(is.numeric)
, any_of(
loadings(.efa_model)[,] %>%
rownames()
)) %>%
pivot_longer(
cols = is.numeric
, names_to = 'item'
, values_to = 'item.score'
) %>%
mutate(
item.score = pmax(
item.score
, dbl_scale.lb
)
, item.score = pmin(
item.score
, dbl_scale.ub
)
) -> df_data.long
loadings(.efa_model)[,] %>%
as_tibble(rownames = 'item') %>%
pivot_longer(
cols = !item
, names_to = 'factor'
, values_to = 'factor.loading'
) -> df_loadings.long
df_data.long %>%
full_join(df_loadings.long) %>%
full_join(.df_factors.impact) %>%
mutate(
factor.impact = pmax(
factor.impact
, -dbl_scale.ub
)
, factor.impact = pmin(
factor.impact
, dbl_scale.ub
)
) -> df_loadings.long
# Calculate net impact
df_loadings.long %>%
group_by(
across(c(
-where(is.numeric)
, -factor
))) %>%
reframe(
item.score = item.score
, item.impact =
sum(
factor.loading *
factor.impact
)
) %>%
group_by(
across(c(
-where(is.numeric)
))) %>%
slice(1) %>%
ungroup() %>%
mutate(
.after = item.score
, item.score2 =
item.score +
item.impact
, item.score2 = pmax(
item.score2
, dbl_scale.lb
)
, item.score2 = pmin(
item.score2
, dbl_scale.ub
)
, item.impact.rate =
if_else(
item.score == 0
, (item.score2 - item.score) /
dbl_scale.ub
, (item.score2 - item.score) /
item.score
)
, item.impact.rate = pmax(
item.impact.rate
, dbl_impact.lb
)
, item.impact.rate = pmin(
item.impact.rate
, dbl_impact.ub
)
) -> df_impact
# Aggregate results
df_impact.items <- NULL
df_impact.agg <- NULL
df_impact.all <- NULL
if(.lgc_aggregate){
df_impact %>%
group_by(
across(c(
-where(is.numeric)
, -item
))) %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.agg
df_impact %>%
group_by(item) %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.items
df_impact %>%
reframe(across(
.cols = is.numeric
,.fns = mean
)) -> df_impact.all
}
# Output
return(compact(list(
'individual.impact' = df_impact
, 'items.impact' = df_impact.items
, 'aggregate.impact' = df_impact.agg
, 'overall.impact' = df_impact.all
, 'factors.impact' = .df_factors.impact
, 'data' = df_data.long
, 'scale.lb' = dbl_scale.lb
, 'scale.ub' = dbl_scale.ub
, 'impact.lb' = dbl_impact.lb
, 'impact.ub' = dbl_impact.ub
)))
}
# DSDS --------------------------------------------------------------------
fun_EFA.impact(
.df_data =
df_occupations %>%
select(
occupation
, ends_with('.l')
)
, .efa_model = EFA_skill.1$EFA.workflow$EFA$EFA.2Factors$model
, .df_factors.impact = df_impact
, .dbl_scale.lb = 0
, .dbl_scale.ub = 100
, .dbl_impact.lb = -Inf
, .dbl_impact.ub = Inf
, .lgc_aggregate = T
) -> dsds
dsds$individual.impact
dsds$items.impact
dsds$items.impact %>% view
