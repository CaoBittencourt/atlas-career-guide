) %>% return(.)
}
# [x] BEST MODELS: PERFORM EFA WITHIN A RANGE OF FACTOR NUMBERS AND PICK THE BEST MODEL" --------
#  [x] FULLY AUTOMATED EFA TOP ITEMS WORKFLOW FUNCTION ------------------------------------------------------
fun_best.model.top.items.workflow <- function(
# Basic
df_data.numeric
, auto_select.nfactors = F
, int_min.factor_size = 3
, int_nfactors.vector = seq(1,5)
, int_n.items.total= 15
, chr_rotation = 'promax'
# Underloadings and crossloadings
, remove_under_loading.items = T
, remove_cross_loading.items = F
, dbl_under_loading.threshold = 0.4 #Lesser than 0.4 loading = under loading
, dbl_cross_loading.threshold = 0.05 #Lesser than 0.05 loading difference = cross loading
# Diagrams and tests
, show_diagrams = T
, show_results = F
){
# Make sure there is only numeric data
df_data.numeric %>%
select(where(is.numeric)) -> df_data.numeric
# If repetitions in vector, keep only unique values
int_nfactors.vector <- unique(int_nfactors.vector)
# Run multi EFA top items workflow
fun_top.items.multi.workflow(
# Basic
df_data.numeric = df_data.numeric
, auto_select.nfactors = auto_select.nfactors
, int_nfactors.vector = int_nfactors.vector
, int_n.items.total= int_n.items.total
, chr_rotation = chr_rotation
# Underloadings and crossloadings
, remove_under_loading.items = remove_under_loading.items
, remove_cross_loading.items = remove_cross_loading.items
, dbl_under_loading.threshold = dbl_under_loading.threshold
, dbl_cross_loading.threshold = dbl_cross_loading.threshold
# Diagrams and tests
, show_diagrams = show_diagrams
, show_results = show_results
) -> list_EFA.multi.top_items
# Exclusion criteria
list_EFA.multi.top_items$reliability.metrics %>%
# 1. Unnecessary factors: if unused factors > 0, exclude model
filter(Unused_Factors == 0) %>%
# 2. Minimum items per factor: if min items per factor < int_min.factor_size, exclude model
filter(Items.Min >= int_min.factor_size) -> df_reliability
# 4. Reliability comparison
df_reliability %>%
group_by(
across(
contains(c('Model', 'Factors', 'Items', 'Interitem'))
)
) %>%
transmute(
Reliability.Avg = mean(
c_across(-contains(c('Model', 'Factors', 'Items', 'Interitem')))
, na.rm = T)) %>%
ungroup() %>%
top_n(1, Reliability.Avg) -> df_reliability.best
# Best models
list_EFA.multi.top_items$reliability.evaluation %>%
filter(Model %in% df_reliability$Model) -> df_reliability.eval
# Most internally consistent model ("Best model")
list(
'EFA' = list_EFA.multi.top_items$EFA$EFA[df_reliability.best$Model] %>% purrr::flatten()
, 'top.items' = list_EFA.multi.top_items$top.items[df_reliability.best$Model] %>% purrr::flatten_df()
, 'EFA.top.items' = list_EFA.multi.top_items$EFA.top.items[df_reliability.best$Model] %>% purrr::flatten()
) -> list_EFA.Best
# Overall reliability comparison
list_EFA.multi.top_items$reliability.metrics -> df_reliability.all
list_EFA.multi.top_items$reliability.evaluation -> df_reliability.eval.all
# Output
list(
'EFA.workflow' = list_EFA.multi.top_items
, 'best.model' = list_EFA.Best
, 'all.models.reliability' = df_reliability.all
, 'all.models.evaluation' = df_reliability.eval.all
, 'best.models.reliability' = df_reliability
, 'best.models.evaluation' = df_reliability.eval
) %>%
return(.)
}
#  [x] FULLY AUTOMATED EFA WORKFLOW FUNCTION (WITHOUT TOP ITEMS SELECTION) ------------------------------------------------------
fun_best.model.workflow <- function(
# Basic
df_data.numeric
, auto_select.nfactors = F
, int_min.factor_size = 3
, int_nfactors.vector = seq(1,5)
, chr_rotation = 'promax'
# Underloadings and crossloadings
, remove_under_loading.items = T
, remove_cross_loading.items = F
, dbl_under_loading.threshold = 0.4 #Lesser than 0.4 loading = under loading
, dbl_cross_loading.threshold = 0.05 #Lesser than 0.05 loading difference = cross loading
# Diagrams and tests
, show_diagrams = T
, show_results = F
){
# Make sure there is only numeric data
df_data.numeric %>%
select(where(is.numeric)) -> df_data.numeric
# If repetitions in vector, keep only unique values
int_nfactors.vector <- unique(int_nfactors.vector)
# Run multi EFA workflow (without top items)
fun_EFA.multi(
# Basic
df_data.numeric
, auto_select.nfactors = auto_select.nfactors
, int_nfactors.vector = int_nfactors.vector
, chr_rotation = chr_rotation
# Underloadings and crossloadings
, remove_under_loading.items = remove_under_loading.items
, remove_cross_loading.items = remove_cross_loading.items
, dbl_under_loading.threshold = dbl_under_loading.threshold
, dbl_cross_loading.threshold = dbl_cross_loading.threshold
# Diagrams and tests
, show_diagrams = show_diagrams
, show_results = show_results
) -> list_EFA.multi
# Exclusion criteria
list_EFA.multi$reliability.metrics %>%
# 1. Unnecessary factors: if unused factors > 0, exclude model
filter(Unused_Factors == 0) %>%
# 2. Minimum items per factor: if min items per factor < int_min.factor_size, exclude model
filter(Items.Min >= int_min.factor_size) -> df_reliability
# 4. Reliability comparison
df_reliability %>%
group_by(
across(
contains(c('Model', 'Factors', 'Items', 'Interitem'))
)
) %>%
transmute(
Reliability.Avg = mean(
c_across(-contains(c('Model', 'Factors', 'Items', 'Interitem')))
, na.rm = T)) %>%
ungroup() %>%
top_n(1, Reliability.Avg) -> df_reliability.best
# Best models
list_EFA.multi$reliability.evaluation %>%
filter(Model %in% df_reliability$Model) -> df_reliability.eval
# Most internally consistent model ("Best model")
list_EFA.multi$EFA[df_reliability.best$Model] %>%
purrr::flatten() -> list_EFA.Best
# Overall reliability comparison
list_EFA.multi$reliability.metrics -> df_reliability.all
list_EFA.multi$reliability.evaluation -> df_reliability.eval.all
# Output
list(
'EFA.workflow' = list_EFA.multi
, 'best.model' = list_EFA.Best
, 'all.models.reliability' = df_reliability.all
, 'all.models.evaluation' = df_reliability.eval.all
, 'best.models.reliability' = df_reliability
, 'best.models.evaluation' = df_reliability.eval
) %>%
return(.)
}
fun_best.model.workflow(
df_data.numeric = df_occupations.numeric.ablt
, auto_select.nfactors = T
, chr_rotation = 'promax'
, show_diagrams = T
, show_results = T
, dbl_under_loading.threshold = .4
, dbl_cross_loading.threshold = .3
, remove_under_loading.items = T
, remove_cross_loading.items = T
) -> ds
ds
# PACKAGES -----------------------------------------------------------------
pkg <- c(
# 'paletteer', 'ggthemes', 'scales' #Visualization
'readr', 'readxl','openxlsx' #Read and write utilities
, 'tidyverse', 'labelled' #Data wrangling
# , 'caret' #Variance filter
, 'psych' #Factor analysis
)
# Activate / install packages
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Package citation
# lapply(pkg, function(x)
#   {citation(package = x)})
# WORKING DIRECTORY -------------------------------------------------------
setwd('C:/Users/Cao/Documents/Github/Atlas-Research/Career-Choice-Models')
# AUTO-EFA FUNCTIONS ----------------------------------------------------------------
source('./Auto_EFA.R')
# DATA --------------------------------------------------------------------
# Occupations data frame
df_occupations <- readr::read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSphzWoCxoNaiaJcQUWKCMqUAT041Q8UqUgM7rSzIwYZb7FhttKJwNgtrFf-r7EgzXHFom4UjLl2ltk/pub?gid=563902602&single=true&output=csv')
# Labels character vector
chr_labels <- scan(
url('https://docs.google.com/spreadsheets/d/e/2PACX-1vSphzWoCxoNaiaJcQUWKCMqUAT041Q8UqUgM7rSzIwYZb7FhttKJwNgtrFf-r7EgzXHFom4UjLl2ltk/pub?gid=1223197022&single=true&output=csv')
, sep=','
, what = ''
, quiet = T
)
# Exploratory analyses
df_occupations %>% glimpse()
df_occupations %>% class()
df_occupations %>% head()
chr_labels %>% glimpse()
chr_labels %>% class()
chr_labels %>% head()
ncol(df_occupations) == length(chr_labels)
# Apply labels
df_occupations %>%
labelled::set_variable_labels(
.labels = chr_labels
) -> df_occupations
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, '_Skill')}) #All Skills only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.skill
# # Only numeric variables
# df_occupations %>%
#   select(
#     where(function(x){str_detect(attributes(x)$label, 'Basic')}) #Basic Skills only
#     , -ends_with('.I') #Using recommended levels
#     # , -ends_with('.L') #Using importance levels
#   ) %>%
#   mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
#     across(
#       .fns = function(x){x/100}
#     )
#   ) -> df_occupations.numeric.basic
#
# # Only numeric variables
# df_occupations %>%
#   select(
#     where(function(x){str_detect(attributes(x)$label, 'Cross')}) #Cross functional Skills only
#     , -ends_with('.I') #Using recommended levels
#     # , -ends_with('.L') #Using importance levels
#   ) %>%
#   mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
#     across(
#       .fns = function(x){x/100}
#     )
#   ) -> df_occupations.numeric.cross
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Abilities.')}) #Abilities only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.ablt
# Only numeric variables
df_occupations %>%
select(
where(function(x){str_detect(attributes(x)$label, 'Knowledge.')}) #Knowledge only
, -ends_with('.I') #Using recommended levels
# , -ends_with('.L') #Using importance levels
) %>%
mutate(#0 to 100 => 0 to 1 (helps calculate similarity later on)
across(
.fns = function(x){x/100}
)
) -> df_occupations.numeric.know
# GLOBAL EFA PARAMETERS FIRST TEST ---------------------------------------------------
# Number of factors
.auto_select.nfactors <- T
# int_nfactors.vector <- seq(1,5)
# Minimum factor size
# .int_min.factor_size.basic <- 2
.int_min.factor_size <- 3
# Top items
# .int_n.items.total.basic <- 5
# .int_n.items.total.cross <- 10
.int_n.items.total.skill <- 8
.int_n.items.total.ablt <- 12 #don't edit
.int_n.items.total.know <- 12
# Rotation (Oblique)
# .chr_rotation <- 'promax'
# .chr_rotation <- 'oblimin'
# Rotation (Orthogonal)
.chr_rotation <- 'varimax'
.remove_unacceptable_MSAi.items <- T
# Underloadings and crossloadings
.remove_under_loading.items <- T
.remove_cross_loading.items <- T
.dbl_under_loading.threshold <- 0.5 #Lesser than 0.4 loading <- under loading
# .dbl_cross_loading.threshold <- 0.05 #Lesser than 0.05 loading difference <- cross loading
.dbl_cross_loading.threshold <- 0.35
# Diagrams and tests
.show_diagrams <- T
.show_results <- F
# FULLY AUTOMATED EFA WORKFLOW (WITH TOP ITEMS) --------------------------------------------
# # Basic Skills
# fun_best.model.top.items.workflow(
#   # Basic
#   .df_data.numeric = df_occupations.numeric.basic
#   , .auto_select.nfactors = .auto_select.nfactors
#   , .int_min.factor_size = .int_min.factor_size.basic
#   , .int_n.items.total = .int_n.items.total.cross
#   , .chr_rotation = .chr_rotation
#   # Underloadings and crossloadings
#   , .remove_under_loading.items = .remove_under_loading.items
#   , .remove_cross_loading.items = .remove_cross_loading.items
#   , .dbl_under_loading.threshold = .dbl_under_loading.threshold
#   , .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
#   # Diagrams and tests
#   , .show_diagrams = .show_diagrams
#   , .show_results = .show_results
# ) -> EFA_Basic
#
# # Cross Functional Skills
# fun_best.model.top.items.workflow(
#   # Basic
#   .df_data.numeric = df_occupations.numeric.cross
#   , .auto_select.nfactors = .auto_select.nfactors
#   , .int_min.factor_size = .int_min.factor_size.basic
#   , .int_n.items.total = .int_n.items.total.cross
#   , .chr_rotation = .chr_rotation
#   # Underloadings and crossloadings
#   , .remove_under_loading.items = .remove_under_loading.items
#   , .remove_cross_loading.items = .remove_cross_loading.items
#   , .dbl_under_loading.threshold = .dbl_under_loading.threshold
#   , .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
#   # Diagrams and tests
#   , .show_diagrams = .show_diagrams
#   , .show_results = .show_results
# ) -> EFA_Cross
# All Skills
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.skill
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.skill
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Skill
# Abilities
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.ablt
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.ablt
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Ablt
# Knowledge
fun_best.model.top.items.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.know
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .int_n.items.total = .int_n.items.total.know
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Know
# FULLY AUTOMATED EFA WORKFLOW (ONLY STAGE ONE) --------------------------------------------
# Basic Skills
# fun_best.model.workflow(
#   # Basic
#   .df_data.numeric = df_occupations.numeric.basic
#   , .auto_select.nfactors = .auto_select.nfactors
#   , .int_min.factor_size = .int_min.factor_size.basic
#   , .chr_rotation = .chr_rotation
#   # Underloadings and crossloadings
#   , .remove_under_loading.items = .remove_under_loading.items
#   , .remove_cross_loading.items = .remove_cross_loading.items
#   , .dbl_under_loading.threshold = .dbl_under_loading.threshold
#   , .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
#   # Diagrams and tests
#   , .show_diagrams = .show_diagrams
#   , .show_results = .show_results
# ) -> EFA_Basic.1
#
# # Cross Functional Skills
# fun_best.model.workflow(
#   # Basic
#   .df_data.numeric = df_occupations.numeric.cross
#   , .auto_select.nfactors = .auto_select.nfactors
#   , .int_min.factor_size = .int_min.factor_size.basic
#   , .chr_rotation = .chr_rotation
#   # Underloadings and crossloadings
#   , .remove_under_loading.items = .remove_under_loading.items
#   , .remove_cross_loading.items = .remove_cross_loading.items
#   , .dbl_under_loading.threshold = .dbl_under_loading.threshold
#   , .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
#   # Diagrams and tests
#   , .show_diagrams = .show_diagrams
#   , .show_results = .show_results
# ) -> EFA_Cross.1
# All Skills
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.skill
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Skill.1
# Abilities
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.ablt
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Ablt.1
# Knowledge
fun_best.model.workflow(
# Basic
.df_data.numeric = df_occupations.numeric.know
, .auto_select.nfactors = .auto_select.nfactors
, .int_min.factor_size = .int_min.factor_size
, .chr_rotation = .chr_rotation
, .remove_unacceptable_MSAi.items = .remove_unacceptable_MSAi.items
# Underloadings and crossloadings
, .remove_under_loading.items = .remove_under_loading.items
, .remove_cross_loading.items = .remove_cross_loading.items
, .dbl_under_loading.threshold = .dbl_under_loading.threshold
, .dbl_cross_loading.threshold = .dbl_cross_loading.threshold
# Diagrams and tests
, .show_diagrams = .show_diagrams
, .show_results = .show_results
) -> EFA_Know.1
# COMPARING ONE STAGE WITH TWO STAGE EFA --------------------------------
# Skills
EFA_Skill$best.model$EFA.top.items$reliability.evaluation
EFA_Skill.1$best.model$reliability.evaluation
EFA_Skill$best.models.evaluation %>% view()
EFA_Skill.1$best.models.evaluation %>% view()
EFA_Skill$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation
EFA_Skill$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation
# COMPARING ONE STAGE WITH TWO STAGE EFA --------------------------------
# Skills
EFA_Skill$best.model$EFA.top.items$reliability.evaluation
EFA_Skill.1$best.model$reliability.evaluation
# Abilities
EFA_Ablt$best.model$EFA.top.items$reliability.evaluation
EFA_Ablt.1$best.model$reliability.evaluation
EFA_Ablt$best.model$EFA.top.items$reliability.evaluation
EFA_Ablt$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation
EFA_Ablt$EFA.workflow$EFA.top.items$EFA.4Factors$reliability.evaluation
EFA_Ablt$best.models.evaluation %>% view()
EFA_Ablt.1$best.models.evaluation %>% view()
# Fields of Knowledge
EFA_Know$best.model$EFA.top.items$reliability.evaluation
EFA_Know.1$best.model$reliability.evaluation
EFA_Know$best.models.evaluation %>% view()
EFA_Know.1$best.models.evaluation %>% view()
EFA_Know$EFA.workflow$EFA.top.items$EFA.2Factors$reliability.evaluation
EFA_Know$EFA.workflow$EFA.top.items$EFA.3Factors$reliability.evaluation
EFA_Know$EFA.workflow$EFA.top.items$EFA.4Factors$reliability.evaluation
EFA_Know$best.models.evaluation %>% view()
EFA_Skill$EFA.workflow$top.items$EFA.2Factors$Item
EFA_Ablt$EFA.workflow$top.items$EFA.4Factors$Item
EFA_Know$EFA.workflow$top.items$EFA.4Factors$Item
