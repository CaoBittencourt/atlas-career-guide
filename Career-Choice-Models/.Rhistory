#       , -Occupation
#       , -Career_Cluster
#     )
#     ,.fns = function(x){
#
#       ifelse(
#         x == 0
#         , yes = 0
#         , no = eval(sym(paste0(cur_column(),'.input')))
#       )
#
#     }
#     , .names = '{col}.sub'
#   )
# ) %>%
# ungroup() %>%
select(
ends_with('.input')
) %>%
rename_with(
function(x){str_remove(x,'.input')}
) -> df_input.sub
# KNN MATCHING WITHOUT ITEM SCORES ----------------------------------------
lapply(
1:nrow(df_input.sub)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations[x,]
, .vec_query.numeric = df_input.sub[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(Euclidean_Distance) -> df_KNN.output.sub
# SCORE ITEMS (OCCUPATIONS) -----------------------------------------------
psych::scoreVeryFast(
keys = flatten(list_factors)
, items = df_occupations %>%
select(
all_of(
list_factors %>%
flatten() %>%
flatten_chr()
)
)
, totals = F #Average scores
) %>%
as_tibble() %>%
bind_cols(
df_occupations
) %>%
select(
where(
negate(is.numeric)
)
, list_factors %>%
flatten() %>%
names()
) -> df_occupations.scores
# SCORE ITEMS (JSON INPUT) -----------------------------------------------
lapply(
list_factors
, function(scales){
psych::scoreVeryFast(
keys = scales
, items = df_input.sub
, totals = F #Average scores
) %>%
as_tibble()
}
) %>% flatten_df() -> df_factor.scores
# KNN MATCHING WITH ITEM SCORES -------------------------------------------
lapply(
1:nrow(df_factor.scores)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations.scores[x,]
, .vec_query.numeric = df_factor.scores[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(Euclidean_Distance) -> df_KNN.output.sub.scores
# OUTPUT ------------------------------------------------------------------
df_KNN.output.sub %>%
select(
Occupation
, Career_Cluster
, Euclidean_Distance
, starts_with('Similarity')
) %>%
view()
df_KNN.output.sub.scores %>%
select(
Occupation
, Career_Cluster
, Euclidean_Distance
, starts_with('Similarity')
) %>%
view()
# [VERY LOW REQUIREMENTS] OVERQUALIFICATION INPUT (ONLY IF SCORE <= 0.05) -------------------------------------------------
df_input %>%
rename_with(
.fn = function(x){paste0(x,'.input')}
) %>%
bind_cols(
df_occupations
) %>%
# group_by(Occupation) %>%
mutate(
across(
.cols = c(
!ends_with('.input')
, -Occupation
, -Career_Cluster
)
,.fns = function(x){
ifelse(
# Overqualified if > .05 and requirement <= .05
x <= 0.05 & eval(sym(paste0(cur_column(),'.input'))) > x
, yes = x
, no = eval(sym(paste0(cur_column(),'.input')))
)
}
, .names = '{col}.sub'
)
) %>%
# ungroup() %>%
select(
ends_with('.sub')
) %>%
rename_with(
function(x){str_remove(x,'.sub')}
) -> df_input.sub
# KNN MATCHING WITHOUT ITEM SCORES ----------------------------------------
lapply(
1:nrow(df_input.sub)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations[x,]
, .vec_query.numeric = df_input.sub[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(Euclidean_Distance) -> df_KNN.output.sub
# SCORE ITEMS (OCCUPATIONS) -----------------------------------------------
psych::scoreVeryFast(
keys = flatten(list_factors)
, items = df_occupations %>%
select(
all_of(
list_factors %>%
flatten() %>%
flatten_chr()
)
)
, totals = F #Average scores
) %>%
as_tibble() %>%
bind_cols(
df_occupations
) %>%
select(
where(
negate(is.numeric)
)
, list_factors %>%
flatten() %>%
names()
) -> df_occupations.scores
# SCORE ITEMS (JSON INPUT) -----------------------------------------------
lapply(
list_factors
, function(scales){
psych::scoreVeryFast(
keys = scales
, items = df_input.sub
, totals = F #Average scores
) %>%
as_tibble()
}
) %>% flatten_df() -> df_factor.scores
# KNN MATCHING WITH ITEM SCORES -------------------------------------------
lapply(
1:nrow(df_factor.scores)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations.scores[x,]
, .vec_query.numeric = df_factor.scores[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(Euclidean_Distance) -> df_KNN.output.sub.scores
# OUTPUT ------------------------------------------------------------------
df_KNN.output.sub %>%
select(
Occupation
, Career_Cluster
, Euclidean_Distance
, starts_with('Similarity')
) %>%
view()
df_KNN.output.sub.scores %>%
select(
Occupation
, Career_Cluster
, Euclidean_Distance
, starts_with('Similarity')
) %>%
view()
# GRAPHS ------------------------------------------------------------------
df_KNN.output.sub %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5)
df_KNN.output.sub.scores %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5)
df_KNN.output.sub.scores %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
head(30)
df_KNN.output.sub.scores %>%
head(30) %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
head(15) %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
head(1) %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
head(3) %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
# For this example, use Martijn' questionnaire
df_input.all %>%
# filter(Name == 'Acilio') %>%
# filter(Name == 'Alexandre') %>%
# filter(Name == 'Cao') %>%
# filter(Name == 'Felipe') %>%
# filter(Name == 'Gabriel') %>%
filter(Name == 'Martijn') %>%
# filter(Name == 'MaurÃ­cio') %>%
# filter(Name == 'Milena') %>%
# filter(Name == 'Tatiana') %>%
# filter(Name == 'Uelinton') %>%
select(-Name) -> df_input
# [VERY LOW REQUIREMENTS] OVERQUALIFICATION INPUT (ONLY IF SCORE <= 0.05) -------------------------------------------------
df_input %>%
rename_with(
.fn = function(x){paste0(x,'.input')}
) %>%
bind_cols(
df_occupations
) %>%
# group_by(Occupation) %>%
mutate(
across(
.cols = c(
!ends_with('.input')
, -Occupation
, -Career_Cluster
)
,.fns = function(x){
ifelse(
# Overqualified if > .05 and requirement <= .05
x <= 0.05 & eval(sym(paste0(cur_column(),'.input'))) > x
, yes = x
, no = eval(sym(paste0(cur_column(),'.input')))
)
}
, .names = '{col}.sub'
)
) %>%
# ungroup() %>%
select(
ends_with('.sub')
) %>%
rename_with(
function(x){str_remove(x,'.sub')}
) -> df_input.sub
# KNN MATCHING WITHOUT ITEM SCORES ----------------------------------------
lapply(
1:nrow(df_input.sub)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations[x,]
, .vec_query.numeric = df_input.sub[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(Euclidean_Distance) -> df_KNN.output.sub
# SCORE ITEMS (OCCUPATIONS) -----------------------------------------------
psych::scoreVeryFast(
keys = flatten(list_factors)
, items = df_occupations %>%
select(
all_of(
list_factors %>%
flatten() %>%
flatten_chr()
)
)
, totals = F #Average scores
) %>%
as_tibble() %>%
bind_cols(
df_occupations
) %>%
select(
where(
negate(is.numeric)
)
, list_factors %>%
flatten() %>%
names()
) -> df_occupations.scores
# SCORE ITEMS (JSON INPUT) -----------------------------------------------
lapply(
list_factors
, function(scales){
psych::scoreVeryFast(
keys = scales
, items = df_input.sub
, totals = F #Average scores
) %>%
as_tibble()
}
) %>% flatten_df() -> df_factor.scores
# KNN MATCHING WITH ITEM SCORES -------------------------------------------
lapply(
1:nrow(df_factor.scores)
, function(x){
fun_KNN.matching(
.df_data.numeric = df_occupations.scores[x,]
, .vec_query.numeric = df_factor.scores[x,]
, .int_k = 1
)
}) %>%
bind_rows() %>%
arrange(Euclidean_Distance) -> df_KNN.output.sub.scores
# GRAPHS ------------------------------------------------------------------
df_KNN.output.sub %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(-1,1)
)
df_KNN.output.sub.scores %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(0,1)
)
# GRAPHS ------------------------------------------------------------------
df_KNN.output.sub %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(0,1)
)
df_KNN.output.sub.scores %>%
pivot_longer(
cols = starts_with('Similarity.')
, names_to = 'Similarity'
, values_to = 'Value'
) %>%
ggplot(aes(
x = Value
, color = Similarity
)) +
geom_density(size = 1.5) +
scale_x_continuous(
limits = c(0,1)
)
1 - 4/2
1 - (2**2)/2
1 - (1**2)/2
1 - (.5**2)/2
1 - (.35**2)/2
1 - (0**2)/2
1 - (0.1**2)/2
