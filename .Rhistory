# Main Panel
, numericInput(
inputId = 'num'
, label = 'Digite um número de 0 a 100'
, min = 0
, max = 100
)
# Sidebar
, plotOutput(
outputId = 'zxcv'
)
)
# UI ------------------------------------------------------------------
lalala <- fluidPage(
# Title
title = 'lalala'
# Theme
, theme = 'readable'
# Main Panel
, numericInput(
inputId = 'num'
, value = NULL
, label = 'Digite um número de 0 a 100'
, min = 0
, max = 100
)
# # Sidebar
# , plotOutput(
#   outputId = 'zxcv'
# )
)
# PACOTES -----------------------------------------------------------------
pkg <- c(
'ggthemes', 'scales' #Visualização
, 'shiny' #Shiny app
,'lubridate' ,'tidyverse' #Manipulação de dados e datas
)
# Ativa e/ou instala os pacotes
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Citação dos pacotes
# lapply(pkg, function(x)
#   {citation(package = x)})
# SERVER FUNCTION -------------------------------------------------------------------
dsds <- function(
input
){
qplot(input)
}
# PACOTES -----------------------------------------------------------------
# pkg <- c(
#   'ggthemes', 'scales' #Visualização
#   , 'shiny' #Shiny app
#   ,'lubridate' ,'tidyverse' #Manipulação de dados e datas
# )
#
# # Ativa e/ou instala os pacotes
# lapply(pkg, function(x)
#   if(!require(x, character.only = T))
#   {install.packages(x); require(x)})
#
# # Citação dos pacotes
# # lapply(pkg, function(x)
# #   {citation(package = x)})
# CALL UI & SERVER ------------------------------------------------------------------
# Call UI
source('C:/Users/Cao/Documents/Github/Count-The-Cost/UI.R')
# Call server
source('C:/Users/Cao/Documents/Github/Count-The-Cost/server.R')
shinyApp(ui = lalala, server = dsds)
# CALL UI & SERVER ------------------------------------------------------------------
# Call UI
source('C:/Users/Cao/Documents/Github/Count-The-Cost/UI.R')
# Call server
source('C:/Users/Cao/Documents/Github/Count-The-Cost/server.R')
# EXECUTE SHINY APP -------------------------------------------------------
shinyApp(ui = lalala, server = dsds)
# PACOTES -----------------------------------------------------------------
# pkg <- c(
#   'ggthemes', 'scales' #Visualização
#   , 'shiny' #Shiny app
#   ,'lubridate' ,'tidyverse' #Manipulação de dados e datas
# )
#
# # Ativa e/ou instala os pacotes
# lapply(pkg, function(x)
#   if(!require(x, character.only = T))
#   {install.packages(x); require(x)})
#
# # Citação dos pacotes
# # lapply(pkg, function(x)
# #   {citation(package = x)})
# CALL UI & SERVER ------------------------------------------------------------------
# Call UI
source('C:/Users/Cao/Documents/Github/Count-The-Cost/UI.R')
# Call server
source('C:/Users/Cao/Documents/Github/Count-The-Cost/server.R')
# EXECUTE SHINY APP -------------------------------------------------------
shinyApp(ui = lalala, server = dsds)
# EXECUTE SHINY APP -------------------------------------------------------
shinyApp(ui = lalala, server = dsds)
library(shiny)
library(shiny)
shiny::runExample('02_text')
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
min = 0,
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
library(shiny)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
min = 0,
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
checkboxGroupInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# selectInput(inputId = "dataset",
#             label = "Choose a dataset:",
#             choices = c("rock", "pressure", "cars")),
#
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
min = 0,
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
checkboxGroupInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# selectInput(inputId = "dataset",
#             label = "Choose a dataset:",
#             choices = c("rock", "pressure", "cars")),
#
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
min = 0,
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput(outputId = "dsdsds"),
# Output: HTML table with requested number of observations ----
tableOutput(outputId = "view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$dsdsds <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
pkg <- c(
# 'ggthemes', 'scales' #Visualization
'tidyverse' #Data wrangling
)
# Activate / install packages
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# PACKAGES -----------------------------------------------------------------
pkg <- c(
# 'ggthemes', 'scales' #Visualization
'readr', 'openxlsx' #Read and write utilities
, 'tidyverse' #Data wrangling
)
# Activate / install packages
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Package citation
# lapply(pkg, function(x)
#   {citation(package = x)})
# WORKING DIRECTORY -------------------------------------------------------
setwd('C:/Users/Cao/Documents/Github/Atlas-Research')
# DATA --------------------------------------------------------------------
df_askHR <- readr::read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSubVYRgIbXdEIPXN-piZh33mz8xKtf69lkLFwjEmX3ppVB-v2ZaU-uMV5E9_SzcHVlD4n3Lz4TFy06/pub?gid=0&single=true&output=csv')
df_askHR %>% glimpse()
# df_askHR %>% view()
# Unused column
df_askHR %>%
select(-`53`) -> df_askHR
# Trim white space
df_askHR %>%
mutate(
across(
.cols = everything()
, ~ str_trim(.x)
)
) -> df_askHR
# SELECTION PARAMETERS ---------------------------------------------------
# title: max 25 words
# desc: max 100 words
# tags: max 3
# 4-5 responses
# NUMBER OF RESPONSES -----------------------------------------------------
# Responses <=> Columns
# => Min 4 columns, Max 5 columns
# Number of responses
df_askHR %>%
mutate(
N_Responses = apply(
df_askHR %>% select(starts_with('Response'))
, 1
, function(x){
sum(!is.na(x))
}
)
) -> df_askHR
# 4 <= Number of responses <= 5
# Remove excess responses later on
df_askHR %>%
filter(
N_Responses >= 4
# , N_Responses <= 5
) -> df_askHR
# DESCRIPTION WORD COUNT --------------------------------------------------------------
# Word count
df_askHR %>%
mutate(
Desc_Word_Count =
# Apostrophes
str_remove_all(Description, "\\'") %>%
str_remove_all("\\’") %>%
str_remove_all("\\‘") %>%
str_remove_all("\\”") %>%
str_remove_all("\\“") %>%
# New lines
str_remove_all('[\r\n]') %>%
str_count('\\w+')
) -> df_askHR
# Word count <= 100
# Too limiting => Word count <= 400
# df_askHR %>%
#   filter(
#     # Desc_Word_Count <= 300
#     Desc_Word_Count <= 400
#   ) -> df_askHR
# TITLE WORD COUNT --------------------------------------------------------------
# Word count
df_askHR %>%
mutate(
Title_Word_Count =
# Apostrophes
str_remove_all(Title, "\\'") %>%
str_remove_all("\\’") %>%
str_remove_all("\\‘") %>%
str_remove_all("\\”") %>%
str_remove_all("\\“") %>%
# New lines
str_remove_all('[\r\n]') %>%
str_count('\\w+')
) -> df_askHR
# Title word count <= 25
# Too limiting => Title word count <= 30
# df_askHR %>%
#   filter(
#     # Title_Word_Count <= 25
#     Title_Word_Count <= 30
#   ) -> df_askHR
# NUMBER OF CASES -------------------------------------------------------------------------
# df_askHR %>%
#   nrow(.)
# EXPORT FILTERED DATA -----------------------------------------------------------
df_askHR %>%
openxlsx::write.xlsx(
file = 'Default_Mentorships_Filtered.xlsx'
)
# PACKAGES -----------------------------------------------------------------
pkg <- c(
# 'ggthemes', 'scales' #Visualization
'readr', 'openxlsx' #Read and write utilities
, 'tidyverse' #Data wrangling
)
# Activate / install packages
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Package citation
# lapply(pkg, function(x)
#   {citation(package = x)})
# WORKING DIRECTORY -------------------------------------------------------
setwd('C:/Users/Cao/Documents/Github/Atlas-Research')
# DATA --------------------------------------------------------------------
df_askHR <- readr::read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSubVYRgIbXdEIPXN-piZh33mz8xKtf69lkLFwjEmX3ppVB-v2ZaU-uMV5E9_SzcHVlD4n3Lz4TFy06/pub?gid=0&single=true&output=csv')
df_askHR %>% glimpse()
# df_askHR %>% view()
# Unused column
df_askHR %>%
select(-`53`) -> df_askHR
# Trim white space
df_askHR %>%
mutate(
across(
.cols = everything()
, ~ str_trim(.x)
)
) -> df_askHR
# SELECTION PARAMETERS ---------------------------------------------------
# title: max 25 words
# desc: max 100 words
# tags: max 3
# 4-5 responses
# NUMBER OF RESPONSES -----------------------------------------------------
# Responses <=> Columns
# => Min 4 columns, Max 5 columns
# Number of responses
df_askHR %>%
mutate(
N_Responses = apply(
df_askHR %>% select(starts_with('Response'))
, 1
, function(x){
sum(!is.na(x))
}
)
) -> df_askHR
# 4 <= Number of responses <= 5
# Remove excess responses later on
df_askHR %>%
filter(
N_Responses >= 4
# , N_Responses <= 5
) -> df_askHR
# DESCRIPTION WORD COUNT --------------------------------------------------------------
# Word count
df_askHR %>%
mutate(
Desc_Word_Count =
# Apostrophes
str_remove_all(Description, "\\'") %>%
str_remove_all("\\’") %>%
str_remove_all("\\‘") %>%
str_remove_all("\\”") %>%
str_remove_all("\\“") %>%
# New lines
str_remove_all('[\r\n]') %>%
str_count('\\w+')
) -> df_askHR
df_askHR %>%
arrange(desc(Desc_Word_Count)) -> df_askHR
# Word count <= 100
# Too limiting => Word count <= 400
# df_askHR %>%
#   filter(
#     # Desc_Word_Count <= 300
#     Desc_Word_Count <= 400
#   ) -> df_askHR
# TITLE WORD COUNT --------------------------------------------------------------
# Word count
df_askHR %>%
mutate(
Title_Word_Count =
# Apostrophes
str_remove_all(Title, "\\'") %>%
str_remove_all("\\’") %>%
str_remove_all("\\‘") %>%
str_remove_all("\\”") %>%
str_remove_all("\\“") %>%
# New lines
str_remove_all('[\r\n]') %>%
str_count('\\w+')
) -> df_askHR
# Title word count <= 25
# Too limiting => Title word count <= 30
# df_askHR %>%
#   filter(
#     # Title_Word_Count <= 25
#     Title_Word_Count <= 30
#   ) -> df_askHR
# NUMBER OF CASES -------------------------------------------------------------------------
# df_askHR %>%
#   nrow(.)
# EXPORT FILTERED DATA -----------------------------------------------------------
df_askHR %>%
openxlsx::write.xlsx(
file = 'Default_Mentorships_Filtered.xlsx'
)
