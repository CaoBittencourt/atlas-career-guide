df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), 'statistician'
)) %>%
arrange(desc(
similarity
))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), 'statistician'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), '$statistician'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), '^statistician'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), '^stat'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), '^statistician'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
# - Interpretability ------------------------------------------------------
df_models.long %>%
filter(
occupation ==
df_input$
occupation
) %>%
arrange(desc(
similarity
))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), '^statistician'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
source('C:/Users/Cao/Documents/Github/atlas-research/functions/metrics/fun_employability.R')
df_models %>%
full_join(
df_occupations %>%
mutate(
employment2 =
ceiling(employment2)
) %>%
select(
occupation
, employment2
)
)
df_models %>%
full_join(
df_occupations %>%
mutate(
employment2 =
ceiling(employment2)
) %>%
select(
occupation
, employment2
)
) %>%
mutate(across(
.cols = -c(occupation, employment2)
,.fns = ~
fun_interchangeability(.x)
))
df_models %>%
full_join(
df_occupations %>%
mutate(
employment2 =
ceiling(employment2)
) %>%
select(
occupation
, employment2
)
)
df_models %>%
full_join(
df_occupations %>%
mutate(
employment2 =
ceiling(employment2)
) %>%
select(
occupation
, employment2
)
) %>%
mutate(across(
.cols = -c(occupation, employment2)
,.fns = ~
fun_interchangeability(.x)
)) %>%
reframe(across(
.cols = -c(occupation, employment2)
,.fns = ~
fun_employability(employment2, .x)
)) %>%
round(4) %>%
pivot_longer(
cols = everything()
, names_to = 'model'
, values_to = 'employability'
) %>%
arrange(desc(
employability
))
list_models$
# logit %>%
probit.wgt %>%
mutate(
I =
fun_interchangeability(
probit.wgt
) %>%
round(2)
) %>%
filter(str_detect(
str_to_lower(occupation)
, 'data|econ|math|stat'
)) %>%
print(n = nrow(.))
list_models
list_models$
# logit %>%
probit.wgt %>%
mutate(
I =
fun_interchangeability(
similarity
) %>%
round(2)
) %>%
filter(str_detect(
str_to_lower(occupation)
, 'data|econ|math|stat'
)) %>%
print(n = nrow(.))
# - Interpretability ------------------------------------------------------
df_models.long %>%
filter(
occupation ==
df_input$
occupation
) %>%
arrange(desc(
similarity
))
df_input.t
df_input
df_input[-1]
df_occupations %>%
filter(
occupation ==
df_input$
occupation
)
df_occupations %>%
filter(
occupation ==
df_input$
occupation
) %>%
select(names(
df_input[-1]
))
df_input[-1]
df_occupations %>%
filter(
occupation ==
df_input$
occupation
) %>%
select(names(
df_input[-1]
))
df_models.long %>%
filter(str_detect(
str_to_lower(
occupation
), '^statistician'
)) %>%
arrange(desc(
similarity
)) %>%
print(n = nrow(.))
df_models.long %>%
split(.$model) %>%
map(
~ arrange(.x, desc(2))
) -> list_models
list_models %>%
map_df(
~ .x %>%
filter(
occupation ==
df_input$
occupation
)
) %>%
arrange(desc(
similarity
))
list_models %>%
map(
~ .x %>%
filter(str_detect(
str_to_lower(
occupation
), 'statisticians'
)) %>%
arrange(desc(2))
)
list_models %>%
map(
~ .x %>%
filter(str_detect(
str_to_lower(
occupation
), 'statisticians'
)) %>%
arrange(desc(2))
)
list_models$
bvls.wgt %>%
# slice_tail(n = 10)
print(n = 400)
list_models$
bvls %>%
slice_tail(n = 10)
list_models$
bvls.wgt %>%
slice_tail(n = 10)
list_models$
bvls %>%
slice_tail(n = 10)
source('C:/Users/Cao/Documents/Github/atlas-research/functions/metrics/fun_employability.R')
df_models %>%
full_join(
df_occupations %>%
mutate(
employment2 =
ceiling(employment2)
) %>%
select(
occupation
, employment2
)
) %>%
mutate(across(
.cols = -c(occupation, employment2)
,.fns = ~
fun_interchangeability(.x)
)) %>%
reframe(across(
.cols = -c(occupation, employment2)
,.fns = ~
fun_employability(employment2, .x)
)) %>%
round(4) %>%
pivot_longer(
cols = everything()
, names_to = 'model'
, values_to = 'employability'
) %>%
arrange(desc(
employability
))
list_models$
# logit %>%
probit.wgt %>%
mutate(
I =
fun_interchangeability(
similarity
) %>%
round(2)
) %>%
filter(str_detect(
str_to_lower(occupation)
, 'data|econ|math|stat'
)) %>%
print(n = nrow(.))
list_models$
# logit %>%
probit %>%
# print(n = 100)
slice_head(n = 10)
list(
good = c(
'knn.wgt'
, 'knn.0'
, 'knn.100'
)
, ok = c(
'bvls.wgt'
, 'ols.wgt'
# , 'bvls'
, 'ols'
, 'bvls.wgt'
, 'ols.wgt'
, 'tobit'
, 'bvls'
, 'ols'
, 'knn.17'
, 'knn.100'
)
, shit = c(
'probit.wgt'
, 'logit.wgt'
, 'pearson.wgt'
, 'probit'
, 'logit'
, 'tobit'
, 'pearson'
, 'knn.17'
, 'beta'
, 'beta.wgt'
, 'bvls.wgt'
, 'ols.wgt'
, 'bvls'
, 'ols'
, 'bvls.wgt'
, 'ols.wgt'
)
)
df_input[-1]
df_occupations %>%
filter(
occupation ==
df_input$
occupation
) %>%
select(names(
df_input[-1]
))
df_input[-1] ==
df_occupations %>%
filter(
occupation ==
df_input$
occupation
) %>%
select(names(
df_input[-1]
))
weights::wtd.cors(
x = df_input[-1]
, y =
df_occupations %>%
filter(
occupation ==
df_input$
occupation
) %>%
select(names(
df_input[-1]
))
)
(weights::wtd.cors(
x = df_input[-1]
, y =
df_occupations %>%
filter(
occupation ==
df_input$
occupation
) %>%
select(names(
df_input[-1]
))
) + 1) / 2
# - Interpretability ------------------------------------------------------
df_models.long %>%
filter(
occupation ==
df_input$
occupation
) %>%
arrange(desc(
similarity
))
map_dbl(
.x = 2:ncol(df_occupations.t)
, ~
gamlss::gamlss(
V1 ~ 0 + .
, sigma.formula = ~ 0 + .
, nu.formula = ~ 0 + .
, tau.formula = ~ 0 + .
, family = BEINF
, data = df_occupations.t[c(1,.x)] / 100
, weights = df_occupations.t[[.x]]
) %>%
coef() %>%
pmin(1) %>%
pmax(0)
)
df_occupations[1]
df_occupations[,1]
df_occupations[1,]
df_occupations[1,] %>% select(ends_with('.l'))
df_input
df_input %>% select(ends_with('.l'))
as.numeric(df_input %>% select(ends_with('.l')))
as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.numeric(df_input %>% select(ends_with('.l')))
)
lm.fit(
x = as.numeric(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.numeric(df_input %>% select(ends_with('.l')))
)
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
)
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
) %>% coef()
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
) %>% coef() -> lalala
lalala
lalala %>% view
lalala %>% drop_na()
lalala %>%
as_tibble() drop_na()
lalala[1,]
wtd.cors(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
)
as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
as.matrix(df_input %>% select(ends_with('.l')))
as.matrix(df_occupations[1,] %>% select(ends_with('.l'))) /
as.matrix(df_input %>% select(ends_with('.l')))
(as.matrix(df_occupations[1,] %>% select(ends_with('.l'))) /
as.matrix(df_input %>% select(ends_with('.l')))) ==
lalala[1,]
(as.matrix(df_input %>% select(ends_with('.l'))) /
as.matrix(df_occupations[1,] %>% select(ends_with('.l')))) ==
lalala[1,]
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
) %>% coef() -> lalala
lalala
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
) %>% coef()[1,] -> lalala
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
) %>% coef()[1]
lm.fit(
x = as.matrix(df_occupations[1,] %>% select(ends_with('.l')))
, y = as.matrix(df_input %>% select(ends_with('.l')))
) %>% coef() -> lalala
lalala[1,]
mean(lalala[1,])
df_occupations.t
30 * 3745
