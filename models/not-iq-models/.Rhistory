NOT_IQ_class =
recode(
NOT_IQ_class
, .default = chr_iq_wais[[1]]
, '1' = chr_iq_wais[[2]]
, '2' = chr_iq_wais[[3]]
, '3' = chr_iq_wais[[4]]
, '4' = chr_iq_wais[[5]]
, '5' = chr_iq_wais[[6]]
, '6' = chr_iq_wais[[7]]
),
NOT_IQ_class =
factor(NOT_IQ_class)
) %>%
group_by(occupation) %>%
reframe(
NOT_IQ = pmax(
rnorm(
n = 50000
, mean = NOT_IQ
, sd = dbl_iq_sd
)
, 0)
, NOT_IQ_class =
first(NOT_IQ_class)
) %>%
fun_plot.ridges(aes(
x = NOT_IQ
, y = occupation
, fill = NOT_IQ_class
)
# , .reorder_fct = F
# , .reorder_desc = F
, .fun_format.y = function(y){y}
# , .chr_manual.pal =
)
# - Most and Least Intelligent Occupations -----------------------------------------------
# df_occupations_not_iq %>%
df_occupations_not_iq %>%
arrange(desc(NOT_IQ)) %>%
mutate(
rank = row_number()
) %>%
slice(
1:10,
seq(
round(n()/2) - 5,
round(n()/2) + 5
),
(n() - 10 + 1):n()
) %>%
mutate(
NOT_IQ_class =
findInterval(
NOT_IQ
, dbl_iq_seq
),
NOT_IQ_class =
recode(
NOT_IQ_class
, .default = chr_iq_wais[[1]]
, '1' = chr_iq_wais[[2]]
, '2' = chr_iq_wais[[3]]
, '3' = chr_iq_wais[[4]]
, '4' = chr_iq_wais[[5]]
, '5' = chr_iq_wais[[6]]
, '6' = chr_iq_wais[[7]]
),
NOT_IQ_class =
factor(NOT_IQ_class)
) %>%
group_by(occupation) %>%
reframe(
NOT_IQ = pmax(
rnorm(
# n = 50000
n = 10000
, mean = NOT_IQ
, sd = dbl_iq_sd
)
, 0)
, NOT_IQ_class =
first(NOT_IQ_class)
) %>%
fun_plot.ridges(aes(
x = NOT_IQ
, y = occupation
, fill = NOT_IQ_class
)
# , .reorder_fct = F
# , .reorder_desc = F
, .fun_format.y = function(y){y}
# , .chr_manual.pal =
)
# - Most and Least Intelligent Occupations -----------------------------------------------
# df_occupations_not_iq %>%
df_occupations_not_iq %>%
arrange(desc(NOT_IQ)) %>%
mutate(
rank = row_number()
) %>%
slice(
1:10,
seq(
round(n()/2) - 5,
round(n()/2) + 5
),
(n() - 10 + 1):n()
) %>%
mutate(
NOT_IQ_class =
findInterval(
NOT_IQ
, dbl_iq_seq
),
NOT_IQ_class =
recode(
NOT_IQ_class
, .default = chr_iq_wais[[1]]
, '1' = chr_iq_wais[[2]]
, '2' = chr_iq_wais[[3]]
, '3' = chr_iq_wais[[4]]
, '4' = chr_iq_wais[[5]]
, '5' = chr_iq_wais[[6]]
, '6' = chr_iq_wais[[7]]
),
NOT_IQ_class =
factor(NOT_IQ_class)
) %>%
group_by(occupation) %>%
reframe(
NOT_IQ = pmax(
rnorm(
# n = 50000
n = 25000
, mean = NOT_IQ
, sd = dbl_iq_sd
)
, 0)
, NOT_IQ_class =
first(NOT_IQ_class)
) %>%
fun_plot.ridges(aes(
x = NOT_IQ
, y = occupation
, fill = NOT_IQ_class
)
# , .reorder_fct = F
# , .reorder_desc = F
, .fun_format.y = function(y){y}
# , .chr_manual.pal =
)
# - Most and Least Intelligent Occupations -----------------------------------------------
# df_occupations_not_iq %>%
df_occupations_not_iq %>%
arrange(desc(NOT_IQ)) %>%
mutate(
rank = row_number()
) %>%
slice(
1:10,
seq(
round(n()/2) - 5,
round(n()/2) + 5
),
(n() - 10 + 1):n()
) %>%
mutate(
NOT_IQ_class =
findInterval(
NOT_IQ
, dbl_iq_seq
),
NOT_IQ_class =
recode(
NOT_IQ_class
, .default = chr_iq_wais[[1]]
, '1' = chr_iq_wais[[2]]
, '2' = chr_iq_wais[[3]]
, '3' = chr_iq_wais[[4]]
, '4' = chr_iq_wais[[5]]
, '5' = chr_iq_wais[[6]]
, '6' = chr_iq_wais[[7]]
),
NOT_IQ_class =
factor(NOT_IQ_class)
) %>%
group_by(occupation) %>%
reframe(
NOT_IQ = pmax(
rnorm(
# n = 50000
n = 25000
, mean = NOT_IQ
, sd = dbl_iq_sd
)
, 0)
, NOT_IQ_class =
first(NOT_IQ_class)
) %>%
fun_plot.ridges(aes(
x = NOT_IQ
, y = occupation
, fill = NOT_IQ_class
)
# , .reorder_fct = F
# , .reorder_desc = F
, .fun_format.y = function(y){y}
# , .chr_manual.pal =
)
# - Ridge plot function ---------------------------------------------------
fun_plot.ridges <- function(
# Data
.df_data
, .aes_mapping
# Reorder
, .reorder_fct = T
, .reorder_desc = F
, .reorder_fun = median
# Labels
, .list_labs = list(y = NULL)
, .geom_label = F
# Default parameters
, .list_geom.param = list(
position = 'identity'
, fill = '#3854FB'
, color = '#212121'
, size = 1.1
, alpha = 0.8
)
# Facets
, .sym_facets = NULL
, .int_facets = NULL
, .chr_scales = 'fixed'
# Colors
, .scale_colors = list(
viridis::scale_color_viridis(discrete = T, na.translate = F)
, viridis::scale_fill_viridis(discrete = T, na.translate = F)
)
, .chr_manual.pal = NULL
, .chr_manual.aes = 'fill'
# , .chr_manual.lim = NULL
# Legend
# , .list_legend = list(fill = 'none')
, .list_legend = list()
# Axes
, .fun_axis.x = scale_x_continuous
, .fun_axis.y = scale_y_discrete
, .list_axis.x.args = list(
breaks = breaks_extended(5)
)
, .list_axis.y.args = list(
expand = c(0.01,0)
)
, .fun_format.x = label_number(accuracy = .01)
, .fun_format.y = function(y){str_wrap(y,10)}
# Coordinates
, .dbl_limits.x = NULL
, .coord_flip = F
, .coord_polar = F
# Theme
, .theme =
ggridges::theme_ridges(
center_axis_labels = T
, font_size = 12
) +
theme(
axis.text.y = element_text(vjust = 0.5)
, legend.position = 'bottom'
, legend.direction = 'horizontal'
)
){
# Arguments validation
stopifnot(
"'.df_data' must be a data frame." =
is.data.frame(.df_data)
)
# Quo vars
enquo(.sym_facets) -> enq_facets
# Aes mapping
fun_aes.map(
.aes_mapping
, .chr_required_aes = c('x', 'y')
) -> aes_mapping
# Facets
fun_facets(
.enq_facets = enq_facets
, .int_facets = .int_facets
, .chr_scales = .chr_scales
) -> plt_facets
# Reordering
if(.reorder_fct){
fun_reorder(
.df_data = .df_data
, .enq_var.fct = aes_mapping$y
, .enq_var.dbl = aes_mapping$x
, .fun_ord = .reorder_fun
, .desc = .reorder_desc
) -> .df_data
}
if(all(
.reorder_fct
, length(plt_facets)
)){
if(.reorder_desc){
.df_data %>%
arrange(desc(!!aes_mapping$y)) %>%
pull(!!enq_facets) %>%
unique() -> chr_order
} else {
.df_data %>%
arrange(!!aes_mapping$y) %>%
pull(!!enq_facets) %>%
unique() -> chr_order
}
.df_data %>%
mutate(
!!enq_facets :=
factor(
!!enq_facets
, levels = chr_order
)
) -> .df_data
}
# Color mapping
fun_colors(
.scale_color = .scale_colors
, .chr_manual.pal = .chr_manual.pal
, .chr_manual.aes = .chr_manual.aes
# , .chr_manual.lim = .chr_manual.lim
) -> plt_colors
# Axes format
fun_axis.format(
.fun_axis = .fun_axis.x
, .list_axis.args = .list_axis.x.args
, .fun_format = .fun_format.x
) -> plt_axis.x
fun_axis.format(
.fun_axis = .fun_axis.y
, .list_axis.args = .list_axis.y.args
, .fun_format = .fun_format.y
) -> plt_axis.y
# Coordinates
fun_coordinates(
.dbl_limits.x = .dbl_limits.x
, .coord_flip = .coord_flip
, .coord_polar = .coord_polar
) -> plt_coord
# Theme
fun_theme(.theme) -> plt_theme
# Legend
fun_legends(.list_legend) -> plt_legend
# Labs
fun_labs(.list_labs) -> plt_labs
# Label position
# if(!length(.list_labels.param$position)){
#   # Unless specified, use geom position as label position
#   .list_labels.param$position <- .list_geom.param$position
#
# }
#
# # Labels
# fun_labels(
#   .list_default = .list_labels.param
#   , .aes_mapping = aes_mapping
#   , .coord_flip = .coord_flip
#   , .geom_label = .geom_label
# ) -> plt_labels
# Ridges chart
# geom_density_ridges with default parameters
fun_geom.params(
.fun_geom = geom_density_ridges
, .list_default = .list_geom.param
, .aes_mapping = aes_mapping
) -> plt_geom
# ggplot
.df_data %>%
# Plot
ggplot() +
plt_geom +
# plt_labels +
plt_facets +
# Colors
plt_colors +
# Axes
plt_axis.x +
plt_axis.y +
plt_coord +
# Theme
plt_theme +
plt_legend +
# Labels
plt_labs -> plt_ridges
# Output
return(plt_ridges)
}
# - Most and Least Intelligent Occupations -----------------------------------------------
# df_occupations_not_iq %>%
df_occupations_not_iq %>%
arrange(desc(NOT_IQ)) %>%
mutate(
rank = row_number()
) %>%
slice(
1:10,
seq(
round(n()/2) - 5,
round(n()/2) + 5
),
(n() - 10 + 1):n()
) %>%
mutate(
NOT_IQ_class =
findInterval(
NOT_IQ
, dbl_iq_seq
),
NOT_IQ_class =
recode(
NOT_IQ_class
, .default = chr_iq_wais[[1]]
, '1' = chr_iq_wais[[2]]
, '2' = chr_iq_wais[[3]]
, '3' = chr_iq_wais[[4]]
, '4' = chr_iq_wais[[5]]
, '5' = chr_iq_wais[[6]]
, '6' = chr_iq_wais[[7]]
),
NOT_IQ_class =
factor(NOT_IQ_class)
) %>%
group_by(occupation) %>%
reframe(
NOT_IQ = pmax(
rnorm(
n = 25000
, mean = NOT_IQ
, sd = dbl_iq_sd
)
, 0)
, NOT_IQ_class =
first(NOT_IQ_class)
) %>%
fun_plot.ridges(aes(
x = NOT_IQ
, y = occupation
, fill = NOT_IQ_class
)
# , .reorder_fct = F
# , .reorder_desc = F
, .fun_format.y = function(y){y}
# , .chr_manual.pal =
)
# - Most and Least Intelligent Occupations -----------------------------------------------
# df_occupations_not_iq %>%
df_occupations_not_iq %>%
arrange(desc(NOT_IQ)) %>%
mutate(
rank = row_number()
) %>%
slice(
1:5,
seq(
round(n()/2) - 2,
round(n()/2) + 2
),
(n() - 5 + 1):n()
) %>%
mutate(
NOT_IQ_class =
findInterval(
NOT_IQ
, dbl_iq_seq
),
NOT_IQ_class =
recode(
NOT_IQ_class
, .default = chr_iq_wais[[1]]
, '1' = chr_iq_wais[[2]]
, '2' = chr_iq_wais[[3]]
, '3' = chr_iq_wais[[4]]
, '4' = chr_iq_wais[[5]]
, '5' = chr_iq_wais[[6]]
, '6' = chr_iq_wais[[7]]
),
NOT_IQ_class =
factor(NOT_IQ_class)
) %>%
group_by(occupation) %>%
reframe(
NOT_IQ = pmax(
rnorm(
n = 25000
, mean = NOT_IQ
, sd = dbl_iq_sd
)
, 0)
, NOT_IQ_class =
first(NOT_IQ_class)
) %>%
fun_plot.ridges(aes(
x = NOT_IQ
, y = occupation
, fill = NOT_IQ_class
)
# , .reorder_fct = F
# , .reorder_desc = F
, .fun_format.y = function(y){y}
# , .chr_manual.pal =
)
chr_iq_wais
chr_iq_wais
