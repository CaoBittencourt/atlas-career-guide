theme(
plot.margin = margin(0, 0, 0, 0)
, axis.text.y = element_blank()
)
) +
geom_density(aes(
x = capital.flex
)
, size = 1.2
)
# CAPITAL FLEXIBILITY DISTRIBUTION -----------------------
df_kflex.long %>%
fun_plot.histogram(aes(
x = capital.flex
, y = after_stat(density)
)
, .dbl_limits.y = c(0,1.25*max(density(df_kflex.long$capital.flex)$y))
, .list_axis.x.args = list(
limits = c(-0.1,1.1)
, breaks = seq(0,1,.25)
)
, .fun_format.x = percent_format(accuracy = 1)
, .list_labs = list(
title = str_to_title('distribution of capital flexibility')
, subtitle = str_to_title('understanding the degree of transferability of professional attributes')
, x = str_to_title('capital flexiblity score')
, y = str_to_title('density')
)
, .theme = ggridges::theme_ridges(font_size = 11, center_axis_labels = T) +
theme(
plot.margin = margin(0, 0, 0, 0)
, axis.text.y = element_blank()
)
) +
geom_density(aes(
x = capital.flex
)
, size = 1.2
)
# CAPITAL FLEXIBILITY DISTRIBUTION -----------------------
df_kflex.long %>%
fun_plot.histogram(aes(
x = capital.flex
, y = after_stat(density)
)
, .dbl_limits.y = c(0,1.25*max(density(df_kflex.long$capital.flex)$y))
, .list_axis.x.args = list(
limits = c(-0.1,1.1)
, breaks = seq(0,1,.25)
)
, .fun_format.x = percent_format(accuracy = 1)
, .list_labs = list(
title = str_to_title('distribution of capital flexibility')
, subtitle = str_to_title('understanding the degree of transferability of professional attributes')
, x = str_to_title('capital flexiblity score')
, y = str_to_title('density')
)
, .theme = ggridges::theme_ridges(font_size = 11, center_axis_labels = T) +
theme(
plot.margin = margin(0, 0, 0, 0)
, axis.text.y = element_blank()
)
) +
geom_density(aes(
x = capital.flex
)
, size = 1.2
)
# CAPITAL FLEXIBILITY OF EACH ATTRIBUTE ------------------------------------
# Backup
df_kflex.long2 <- df_kflex.long
# Add lines to the initial dataset
empty_bar <- 27
to_add <- matrix(NA, empty_bar, ncol(df_kflex.long))
colnames(to_add) <- colnames(df_kflex.long)
df_kflex.long2 <- rbind(to_add, df_kflex.long2)
df_kflex.long2$id <- factor(seq(1, nrow(df_kflex.long2)))
# Circular bar plot
df_kflex.long2 %>%
fun_plot.bar(aes(
# x = occupation
x = id
, y = capital.flex
)
, .list_labs = list(
title = str_to_title('capital flexibility by attribute')
, subtitle = str_to_title("how much of each attribute is transferable across occupations")
)
, .coord_polar = T
, .reorder_fct = T
, .fun_axis.y = scale_y_continuous
, .list_axis.y.args = list(
limits = c(-0.55,1.1)
)
, .theme = ggridges::theme_ridges() +
theme(
plot.title = element_text(hjust = 0.5)
, axis.title = element_blank()
, axis.text = element_blank()
, axis.ticks = element_blank()
, panel.grid = element_blank()
, plot.subtitle = element_text(hjust = 0.5)
)
) +
coord_polar(
# start = -6.12
start = -12.21
) +
map(
seq(0,1,0.25)
, function(y){
annotate(
x = '14'
, y = y + 0.1
, label = percent(y)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3
)
}) +
annotate(
x = 1
, y = -.55
, label = str_wrap(
'Many skills have reasonable carryover to other activities.'
, width = 20
)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3.33
) -> plt_attributes.kflex
plt_attributes.kflex$layers <- c(
geom_hline(
yintercept = c(0, 0.25, 0.5, 0.75)
, color = '#D4D5D8'
, size = 0.5
)
, plt_attributes.kflex$layers
)
plt_attributes.kflex$layers <- c(
geom_hline(
yintercept = 1
, color = '#D4D5D8'
, size = 2
)
, plt_attributes.kflex$layers
)
plt_attributes.kflex
# CAPITAL FLEXIBILITY IN EACH OCCUPATION ------------------------------------
# Backup
df_occupations.kflex2 <- df_occupations.kflex
# Add lines to the initial dataset
empty_bar <- 51
to_add <- matrix(NA, empty_bar, ncol(df_occupations.kflex))
colnames(to_add) <- colnames(df_occupations.kflex)
df_occupations.kflex2 <- rbind(to_add, df_occupations.kflex2)
df_occupations.kflex2$id <- factor(seq(1, nrow(df_occupations.kflex2)))
# Circular bar plot
df_occupations.kflex2 %>%
fun_plot.bar(aes(
# x = occupation
x = id
, y = capital.flex.pct
)
, .list_labs = list(
title = str_to_title('capital flexibility by occupation')
, subtitle = str_to_title("how much of each occupation's requirements is transferable to other occupations")
)
, .coord_polar = T
, .reorder_fct = T
, .fun_axis.y = scale_y_continuous
, .list_axis.y.args = list(
limits = c(-0.55,1.1)
)
, .theme = ggridges::theme_ridges() +
theme(
plot.title = element_text(hjust = 0.5)
, axis.title = element_blank()
, axis.text = element_blank()
, axis.ticks = element_blank()
, panel.grid = element_blank()
, plot.subtitle = element_text(hjust = 0.5)
)
) +
coord_polar(
# start = -6.12
start = -6.1
) +
map(
seq(0,1,0.25)
, function(y){
annotate(
x = '26'
, y = y + 0.1
, label = percent(y)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3
)
}) +
annotate(
x = 1
, y = -.55
, label = str_wrap(
'HALF OF ALL PROFESSIONS IS COMMON SENSE!'
, width = 20
)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3.33
) -> plt_occupations.kflex
plt_occupations.kflex$layers <- c(
geom_hline(
yintercept = c(0, 0.25, 0.5, 0.75)
, color = '#D4D5D8'
, size = 0.5
)
, plt_occupations.kflex$layers
)
plt_occupations.kflex$layers <- c(
geom_hline(
yintercept = 1
, color = '#D4D5D8'
, size = 2
)
, plt_occupations.kflex$layers
)
plt_occupations.kflex
# CAPITAL FLEXIBILITY DISTRIBUTION -----------------------
df_kflex.long %>%
fun_plot.histogram(aes(
x = capital.flex
, y = after_stat(density)
)
, .dbl_limits.y = c(0,1.25*max(density(df_kflex.long$capital.flex)$y))
, .list_axis.x.args = list(
limits = c(-0.1,1.1)
, breaks = seq(0,1,.25)
)
, .fun_format.x = percent_format(accuracy = 1)
, .list_labs = list(
title = str_to_title('distribution of capital flexibility')
, subtitle = str_to_title('understanding the degree of transferability of professional attributes')
, x = str_to_title('capital flexiblity score')
, y = str_to_title('density')
)
, .theme = ggridges::theme_ridges(font_size = 11, center_axis_labels = T) +
theme(
plot.margin = margin(0, 0, 0, 0)
, axis.text.y = element_blank()
)
) +
geom_density(aes(
x = capital.flex
)
, size = 1.2
)
# CAPITAL FLEXIBILITY IN EACH OCCUPATION ------------------------------------
# Backup
df_occupations.kflex2 <- df_occupations.kflex
# Add lines to the initial dataset
empty_bar <- 51
to_add <- matrix(NA, empty_bar, ncol(df_occupations.kflex))
colnames(to_add) <- colnames(df_occupations.kflex)
df_occupations.kflex2 <- rbind(to_add, df_occupations.kflex2)
df_occupations.kflex2$id <- factor(seq(1, nrow(df_occupations.kflex2)))
# Circular bar plot
df_occupations.kflex2 %>%
fun_plot.bar(aes(
# x = occupation
x = id
, y = capital.flex.pct
)
, .list_labs = list(
title = str_to_title('capital flexibility by occupation')
, subtitle = str_to_title("how much of each occupation's requirements is transferable to other occupations")
)
, .coord_polar = T
, .reorder_fct = T
, .fun_axis.y = scale_y_continuous
, .list_axis.y.args = list(
limits = c(-0.55,1.1)
)
, .theme = ggridges::theme_ridges() +
theme(
plot.title = element_text(hjust = 0.5)
, axis.title = element_blank()
, axis.text = element_blank()
, axis.ticks = element_blank()
, panel.grid = element_blank()
, plot.subtitle = element_text(hjust = 0.5)
)
) +
coord_polar(
# start = -6.12
start = -6.1
) +
map(
seq(0,1,0.25)
, function(y){
annotate(
x = '26'
, y = y + 0.1
, label = percent(y)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3
)
}) +
annotate(
x = 1
, y = -.55
, label = str_wrap(
'HALF OF ALL PROFESSIONS IS COMMON SENSE!'
, width = 20
)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3.33
) -> plt_occupations.kflex
plt_occupations.kflex$layers <- c(
geom_hline(
yintercept = c(0, 0.25, 0.5, 0.75)
, color = '#D4D5D8'
, size = 0.5
)
, plt_occupations.kflex$layers
)
plt_occupations.kflex$layers <- c(
geom_hline(
yintercept = 1
, color = '#D4D5D8'
, size = 2
)
, plt_occupations.kflex$layers
)
plt_occupations.kflex
# CAPITAL FLEXIBILITY OF EACH ATTRIBUTE ------------------------------------
# Backup
df_kflex.long2 <- df_kflex.long
# Add lines to the initial dataset
empty_bar <- 27
to_add <- matrix(NA, empty_bar, ncol(df_kflex.long))
colnames(to_add) <- colnames(df_kflex.long)
df_kflex.long2 <- rbind(to_add, df_kflex.long2)
df_kflex.long2$id <- factor(seq(1, nrow(df_kflex.long2)))
# Circular bar plot
df_kflex.long2 %>%
fun_plot.bar(aes(
# x = occupation
x = id
, y = capital.flex
)
, .list_labs = list(
title = str_to_title('capital flexibility by attribute')
, subtitle = str_to_title("how much of each attribute is transferable across occupations")
)
, .coord_polar = T
, .reorder_fct = T
, .fun_axis.y = scale_y_continuous
, .list_axis.y.args = list(
limits = c(-0.55,1.1)
)
, .theme = ggridges::theme_ridges() +
theme(
plot.title = element_text(hjust = 0.5)
, axis.title = element_blank()
, axis.text = element_blank()
, axis.ticks = element_blank()
, panel.grid = element_blank()
, plot.subtitle = element_text(hjust = 0.5)
)
) +
coord_polar(
# start = -6.12
start = -12.21
) +
map(
seq(0,1,0.25)
, function(y){
annotate(
x = '14'
, y = y + 0.1
, label = percent(y)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3
)
}) +
annotate(
x = 1
, y = -.55
, label = str_wrap(
'Many skills have reasonable carryover to other activities.'
, width = 20
)
, geom = 'text'
, color = '#212121'
, fontface = 'bold'
, size = 3.33
) -> plt_attributes.kflex
plt_attributes.kflex$layers <- c(
geom_hline(
yintercept = c(0, 0.25, 0.5, 0.75)
, color = '#D4D5D8'
, size = 0.5
)
, plt_attributes.kflex$layers
)
plt_attributes.kflex$layers <- c(
geom_hline(
yintercept = 1
, color = '#D4D5D8'
, size = 2
)
, plt_attributes.kflex$layers
)
plt_attributes.kflex
plt_attributes.kflex +
geomtextpath::geom_textcurve(aes(label = 'dsds'))
plt_attributes.kflex +
geomtextpath::geom_textcurve(
aes(
x = 1
, xend = 3
, y = 1
, yend = 0.9
, label = 'dsds')
)
plt_attributes.kflex
# CAPITAL FLEXIBILITY FUNCTION --------------------------------------------
fun_capital.flex <- function(
.dbl_var
, .dbl_lb = 0
, .dbl_ub = 1
, .dbl_lambda = 0.25
, .lgc_sample = F
){
# Check if var is numeric
if(all(is.na(.dbl_var))){
return(NA)
} else if(!is.numeric(.dbl_var)){
stop("'.dbl_var' must be a numeric vector.")
}
if(
length(.dbl_lb) != 1
| !is.numeric(.dbl_lb)
){
stop("'.dbl_lb' must be a numeric variable of length 1.")
}
if(
length(.dbl_ub) != 1
| !is.numeric(.dbl_ub)
){
stop("'.dbl_ub' must be a numeric variable of length 1.")
}
if(
length(.dbl_ub) != 1
| !is.numeric(.dbl_ub)
| !between(.dbl_lambda, 0, 1)
){
stop("'.dbl_lambda' must be a numeric variable between 0 and 1.")
}
# Logical
if(!(
is.logical(.lgc_sample) &
!is.na(.lgc_sample)
)){
stop("'.lgc_sample' must be either TRUE or FALSE.")
}
# Prevent division by zero by increasing the scale by 1
if(.dbl_ub == 0){
.dbl_lb + 1 -> .dbl_lb
.dbl_ub + 1 -> .dbl_ub
.dbl_var + 1 -> .dbl_var
}
# Calculate upper limit for standard deviation
sd(c(.dbl_lb, .dbl_ub), na.rm = T) -> dbl_std.u
if(!.lgc_sample){
# Population standard deviation
dbl_std.u / sqrt(2) -> dbl_std.u
}
# Calculate stardard deviation
# Sample standard deviation
sd(.dbl_var, na.rm = T) -> dbl_std
if(!.lgc_sample){
# Population standard deviation
sqrt((length(.dbl_var) - 1) / length(.dbl_var)) * dbl_std -> dbl_std
}
# Calculate Mode
unique(mlv(x = .dbl_var, method = 'shorth')) -> dbl_mode
# Calculate capital flexibility score
# .dbl_lambda +
#   (1 - .dbl_lambda) * (dbl_mode / .dbl_ub) +
#   -.dbl_lambda * sqrt(dbl_std / dbl_std.u) +
#   -.dbl_lambda * (1 - (dbl_mode / .dbl_ub)) *
#   (1 - 2 * sqrt(dbl_std / dbl_std.u)) -> dbl_kflex
.dbl_lambda +
(1 - .dbl_lambda) * (dbl_mode / .dbl_ub) +
-.dbl_lambda * (dbl_std / dbl_std.u) +
-.dbl_lambda * (1 - (dbl_mode / .dbl_ub)) *
(1 - 2 * (dbl_std / dbl_std.u)) -> dbl_kflex
# Output
return(dbl_kflex)
}
